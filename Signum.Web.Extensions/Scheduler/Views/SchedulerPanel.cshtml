@using Signum.Utilities.ExpressionTrees
@using Signum.Web.Scheduler
@using Signum.Engine.Scheduler
@using Signum.Entities.DynamicQuery
@using Signum.Entities.Scheduler
@model SchedulerState
<div>
    <h2>@ViewData[ViewDataKeys.Title]</h2>
    @Html.AntiForgeryToken()
    <div>
        <a href="@Url.Action((SchedulerController sc) => sc.Stop())" class="sf-button btn btn-default active" style="@(Model.Running ? "" : "display:none");color:red" id="sfSchedulerDisable">Stop </a>
        <a href="@Url.Action((SchedulerController sc) => sc.Start())" class="sf-button btn btn-default"  style="@(!Model.Running ? "" : "display:none")" id="sfSchedulerEnable">Start </a>
    </div>
    <script>
        $(function () {
            @(SchedulerClient.Module["initDashboard"]())
        });
    </script>
    <div id="schedulerMainDiv">
        <br />
        <h2>SchedulerLogic state in @Environment.MachineName</h2>

        State: <strong>
            @if (Model.Running)
            {
                <span style="color: Green">RUNNING</span>
            }
            else
            {
                <span style="color: Red">STOPPED</span>
            }</strong>
        <br />
        SchedulerMargin: @Model.SchedulerMargin
        <br />
        NextExecution: @Model.NextExecution  (@(Model.NextExecution == null ? "-None-" : Model.NextExecution.Value.ToAgoString()))
    <br />
        <h3>In Memory Queue</h3>
        <table class="sf-search-results sf-stats-table">
            <thead>
                <tr>
                    <th>ScheduledTask
                    </th>
                    <th>Rule
                    </th>
                    <th>NextExecution
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Queue)
                {
                    <tr>
                        <td>@Html.LightEntityLine(item.ScheduledTask, true)
                        </td>
                        <td>@item.Rule
                        </td>
                        <td>@item.NextDate (@item.NextDate.ToAgoString())
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <br />
        <h2>@typeof(ScheduledTaskEntity).NicePluralName()</h2>

        @Html.SearchControl(new FindOptions(typeof(ScheduledTaskEntity))
{
    ShowFilters = false,
    SearchOnLoad = true,
    Pagination = new Pagination.Firsts(10),
}, new Context(null, "st"))
        <br />
        <br />
        <h2>@typeof(ScheduledTaskLogEntity).NicePluralName()</h2>

        @Html.SearchControl(new FindOptions(typeof(ScheduledTaskLogEntity))
{
    OrderOptions = { new OrderOption("StartTime", Signum.Entities.DynamicQuery.OrderType.Descending) },
    ShowFilters = false,
    SearchOnLoad = true,
    Pagination = new Pagination.Firsts(10),
}, new Context(null, "stl"))
        <br />
    </div>
</div>
