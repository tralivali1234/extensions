@using Signum.Engine
@using Signum.Entities.Basics
@using Signum.Engine.Basics
@using Signum.Engine.DynamicQuery
@using Signum.Web.UserQueries
@using Signum.Entities.UserQueries
@using Signum.Entities.UserAssets
@using Signum.Web.UserAssets
@using Signum.Entities.DynamicQuery


@using (var e = Html.TypeContext<UserQueryEntity>())
{
    e.LabelColumns = new BsColumn(2);

    object queryName = QueryLogic.ToQueryName(e.Value.Query.Key);
    ViewData[ViewDataKeys.QueryDescription] = DynamicQueryManager.Current.QueryDescription(queryName); //To be use inside Repeaters
    
    @Html.EntityLine(e, f => f.Owner, el => el.Create = false)
    
    using (var query = e.SubContext(f => f.Query))
    {
    @Html.HiddenRuntimeInfo(query)
       
    @Html.Hidden(query.Compose("Key"), query.Value.Key)

    var niceName = QueryUtils.GetNiceName(query.Value.ToQueryName());

    @Html.FormGroup(e, null, typeof(QueryEntity).NiceName(), Finder.IsFindable(queryName) ?
                     new HtmlTag("a").Class("form-control-static").Attr("href", Finder.FindRoute(queryName)).SetInnerText(niceName).ToHtml() :
                     Html.Span(null, niceName, "form-control-static"))

    }
    
    @Html.ValueLine(e, f => f.DisplayName)
        
    var entityTypePrefix = e.SubContext(a => a.EntityType).Prefix;
        
    @Html.EntityLine(e, f => f.EntityType, el =>
    {
        el.AutocompleteUrl = Url.Action("TypeAutocomplete", "Finder");
        el.AttachFunction = UserAssetsClient.Module["attachShowCurrentEntity"](el);
    })
    
    <p class="messageEntity col-sm-offset-2">
        @UserQueryMessage.Use0ToFilterCurrentEntity.NiceToString().FormatWith(CurrentEntityConverter.CurrentEntityKey)
    </p>

    @Html.ValueLine(e, f => f.SearchOnLoad)
    @Html.ValueLine(e, f => f.ShowFilterButton)
    @Html.ValueLine(e, f => f.WithoutFilters)

    using (var sc = e.SubContext())
    {
        sc.FormGroupSize = FormGroupSize.Small;

    <div class="repeater-inline form-inline sf-filters-list ">
        @Html.EntityRepeater(e, f => f.Filters, er => { er.PreserveViewData = true; })
    </div>

    @Html.ValueLine(e, f => f.ColumnsMode)
    <div class="repeater-inline form-inline sf-filters-list">
        @Html.EntityRepeater(e, f => f.Columns, er => { er.PreserveViewData = true; })
    </div>
    
    <div class="repeater-inline form-inline sf-filters-list">
        @Html.EntityRepeater(e, f => f.Orders, er => { er.PreserveViewData = true; })
    </div>
    }
    
    @Html.ValueLine(e, f => f.PaginationMode)
    @Html.ValueLine(e, f => f.ElementsPerPage)
}
</div>
