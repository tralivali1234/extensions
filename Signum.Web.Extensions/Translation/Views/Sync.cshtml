@model LocalizedAssemblyChanges
@using System.Globalization
@using System.Reflection
@using Signum.Utilities
@using Signum.Engine.Translation
@using Signum.Web.Translation
@using Signum.Web.Translation.Controllers
@using Signum.Entities.Translation
@using Signum.Entities.Authorization;
@{
    CultureInfo culture = ViewBag.Culture;
    int totalTypes = ViewBag.TotalTypes;
    Lite<RoleEntity> selectedRole = ViewBag.Role;

    ViewBag.Title = TranslationMessage.Synchronize0In1.NiceToString().FormatWith(Model.LocalizedAssembly.Assembly.GetName().Name, Model.LocalizedAssembly.Culture.DisplayName);

    if (Model.Types.Count < totalTypes)
    {
        ViewBag.Title = ViewBag.Title + " [{0}/{1} {2}]".FormatWith(Model.Types.Count, totalTypes, selectedRole);
    }

    Func<IEnumerable<string>, List<SelectListItem>> selectListItems = values =>
    {
        var items = values.Select(s => new SelectListItem { Value = s, Text = s }).ToList();

        if (values.Count() > 1 && values.Distinct().Count() == 1 || TranslationClient.Translator.AutoSelect())
        {
            items.First().Selected = true;
            items.Insert(0, new SelectListItem { Value = "", Text = "-" });
        }
        else
        {
            items.Insert(0, new SelectListItem { Value = "", Text = "-", Selected = true });
        }

        return items;
    };

    Func<LocalizedType, string> locKey = lt => lt.Type.Name + "." + lt.Assembly.Culture.Name;
}

@Html.ScriptCss("~/Translation/Content/Translation.css")

@if (Model.Types.IsEmpty())
{
    <h2>@TranslationMessage._0AlreadySynchronized.NiceToString().FormatWith(Model.LocalizedAssembly.Assembly.GetName().Name)</h2>
}
else
{
    <h2>@ViewBag.Title</h2>

    using (Html.BeginForm((TranslationController c) => c.SaveSync(Model.LocalizedAssembly.Assembly.GetName().Name, culture.Name)))
    {
        <table id="results" style="width: 100%; margin: 0px" class="st"
               data-pluralandgender="@Url.Action((TranslationController tc) => tc.PluralAndGender())"
               data-feedback="@Url.Action("Feedback", "Translation")"
               data-culture="@culture.Name">
            @foreach (var typeChanges in Model.Types)
            {
                <thead>
                    <tr>
                        <th class="leftCell">@TranslationMessage.Type.NiceToString()</th>
                        <th colspan="4" class="titleCell">@typeChanges.Type.Type.Name</th>
                    </tr>
                </thead>

                if (typeChanges.TypeConflict != null)
                {

                    bool hasGenderOption = typeChanges.Type.Options.IsSet(DescriptionOptions.Gender);
                    bool hasPlural = typeChanges.Type.Options.IsSet(DescriptionOptions.PluralDescription);

                    foreach (var tc in typeChanges.TypeConflict)
                    {
                        var locType = tc.Value.Original;

                        var hasGender = hasGenderOption && NaturalLanguageTools.HasGenders(tc.Key);
                        <tr>
                            <th class="leftCell">@tc.Key.Name</th>
                            <th class="smallCell monospaceCell">
                                @if (hasGender)
                                {
                                    @(locType.Gender != null ? NaturalLanguageTools.GetPronom(locType.Gender.Value, plural: false, culture: locType.Assembly.Culture) : "-")
                                }
                            </th>
                            <th class="monospaceCell">
                                @locType.Description
                            </th>
                            <th class="smallCell monospaceCell">
                                @if (hasGender && hasPlural)
                                {
                                    @(locType.Gender != null ? NaturalLanguageTools.GetPronom(locType.Gender.Value, plural: true, culture: locType.Assembly.Culture) : "-")
                                }
                            </th>
                            <th class="monospaceCell">
                                @if (hasPlural)
                                {
                                    @(locType.PluralDescription ?? "-")
                                }
                            </th>
                        </tr>
                    }

                    {
                        var locType = typeChanges.Type;

                        var hasGender = hasGenderOption && NaturalLanguageTools.HasGenders(culture);

                        <tr>
                            <th class="leftCell">@culture.Name</th>
                            <th class="smallCell monospaceCell">
                                @if (hasGender)
                                {
                                    var gd = NaturalLanguageTools.GenderDetectors.TryGetC(locType.Assembly.Culture.TwoLetterISOLanguageName);

                                    var list = gd?.Pronoms.EmptyIfNull()
                                            .Select(pi => new SelectListItem { Value = pi.Gender.ToString(), Text = pi.Singular, Selected = pi.Gender == locType.Gender }).ToList();

                                    if (typeChanges.Type.Gender == null)
                                    {
                                        list.Insert(0, new SelectListItem { Value = "", Text = "-", Selected = true });
                                    }
                                    @Html.SafeDropDownList(locKey(typeChanges.Type) + ".Gender", list);
                                }

                            </th>
                            <th class="monospaceCell">
                                @{
                                var items = selectListItems(typeChanges.TypeConflict.Values.Select(a => a.Translated));

                                var elemName = locKey(typeChanges.Type) + ".Description";
                                if (items.Count == 1)
                                {
                                    <textarea name="@elemName" style="width:90%">@items.First()</textarea>
                                    <button class="rememberChange">@TranslationJavascriptMessage.RememberChange.NiceToString()</button>
                                }
                                else
                                {
                                    @Html.SafeDropDownList(elemName, items, new { style = "width:90%" });
                                    <a class="edit">@TranslationMessage.Edit.NiceToString()</a>
                                }
                                }

                            </th>
                            <th class="smallCell monospaceCell">
                                @if (hasGender && hasPlural)
                                {
                                    @(locType.Gender != null ? NaturalLanguageTools.GetPronom(locType.Gender.Value, plural: true, culture: locType.Assembly.Culture) : "-")
                                }
                            </th>
                            <th class="monospaceCell">
                                @if (hasPlural)
                                {
                                    @Html.TextArea(locKey(locType) + ".PluralDescription", locType.PluralDescription, new { style = "width:90%;" })
                                }
                            </th>
                        </tr>

                    }
                }

                {

                    var locType = typeChanges.Type;
                    foreach (var conflict in typeChanges.MemberConflicts)
                    {

                        <tr>
                            <th class="leftCell">
                                @TranslationMessage.Member.NiceToString()
                        </th>
                        <th colspan="4">
                            @conflict.Key
                    </th>
                </tr>
                        foreach (var mc in conflict.Value)
                        {
                            <tr>
                                <td class="leftCell">@mc.Key.Name</td>
                                <td colspan="4" class="monospaceCell">
                                    @mc.Value.Original

                                </td>
                            </tr>
                        }
                        <tr>
                            <td class="leftCell">@culture.Name</td>
                            <td colspan="4" class="monospaceCell">
                                @{
                        var items = selectListItems(conflict.Value.Values.Select(a => a.Translated));
                        var elemName = locKey(typeChanges.Type) + ".Member." + conflict.Key;
                        if (items.Count == 1)
                        {
                            <textarea name="@elemName" style="width:90%">@items.First()</textarea>
                                    <button class="rememberChange">@TranslationJavascriptMessage.RememberChange.NiceToString()</button>
                        }
                        else
                        {
                            @Html.SafeDropDownList(elemName, items);
                                    <a class="edit">@TranslationMessage.Edit.NiceToString()</a>
                        }
                                }

                            </td>
                        </tr>
                    }
                }
            }
        </table>
        <input type="submit" value="@TranslationMessage.Save.NiceToString()" />
    }
}

<script>
    $(function () {
        @(TranslationClient.Module["pluralAndGender"]())
        @(TranslationClient.Module["editAndRemember"](TranslationClient.Translator is ITranslatorWithFeedback))
        @(TranslationClient.Module["fixTextAreas"]())
    });
</script>
