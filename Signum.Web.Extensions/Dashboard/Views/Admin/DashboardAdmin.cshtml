@using Signum.Entities.Dashboard
@using Signum.Web.Dashboard
@using System.Reflection
@using Signum.Web.UserAssets

@Html.ScriptCss("~/Dashboard/Content/Dashboard.css")


@using (var tc = Html.TypeContext<DashboardEntity>())
{
    using (var sc = tc.SubContext())
    {
        sc.FormGroupStyle = FormGroupStyle.Basic;

        <div class="form-vertical">
            <div class="row">
                <div class="col-sm-6">
                    @Html.ValueLine(sc, cp => cp.DisplayName)
                </div>
                <div class="col-sm-3">
                    @Html.ValueLine(sc, cp => cp.DashboardPriority)
                </div>
                <div class="col-sm-3">
                    @Html.ValueLine(sc, cp => cp.AutoRefreshPeriod)
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    @Html.EntityLine(sc, cp => cp.Owner, el => el.Create = false)
                </div>
                <div class="col-sm-4">
                    @Html.EntityLine(sc, cp => cp.EntityType, el => {
               el.AutocompleteUrl = Url.Action("TypeAutocomplete", "Finder");
               el.AttachFunction = UserAssetsClient.Module["attachShowEmbeddedInEntity"](el);
           })
                </div>
                <div class="col-sm-4">
                    @Html.ValueLine(sc, f => f.EmbeddedInEntity)
                </div>
            </div>

            <fieldset>
                <legend>Navbar</legend>
                <div class="row">
                    <div class="col-sm-4">
                        @Html.ValueLine(sc, cp => cp.ForNavbar)
                    </div>
                    <div class="col-sm-4">
                        @Html.ValueLine(sc, cp => cp.Key)
                    </div>
                </div>
            </fieldset>
        </div>

    }

    @Html.GridRepeater(tc, cp => cp.Parts, grid =>
        {
            grid.PartialViewName = DashboardClient.AdminViewPrefix.FormatWith("PanelPartViewAdmin");
            grid.AttachFunction = DashboardClient.Module["attachGridControl"](grid,
               Url.Action("AddNewPart", "Dashboard"),
               DashboardClient.PanelPartViews.Keys.Select(t => t.ToJsTypeInfo(isSearch: false, prefix: grid.Prefix)).ToArray());
        });
}


