@using Signum.Entities.Disconnected

@using (var dc = Html.TypeContext<DisconnectedExportEntity>())
{
    @Html.ValueLine(dc, d => d.CreationDate)
    @Html.EntityLine(dc, d => d.Machine)	
    @Html.ValueLine(dc, d => d.State)

    @Html.ValueLine(dc, d => d.Lock)
    @Html.ValueLine(dc, d => d.CreateDatabase)
    @Html.ValueLine(dc, d => d.CreateSchema)
    @Html.ValueLine(dc, d => d.DisableForeignKeys)
    
    <fieldset>
        <legend>@Html.PropertyNiceName(() => dc.Value.Copies)</legend>
        <div class="form-vertical">
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <td>@Html.PropertyNiceName((DisconnectedExportTableEmbedded de) => de.Type)</td>
                        <td>@Html.PropertyNiceName((DisconnectedExportTableEmbedded de) => de.CopyTable)</td>
                    </tr>
                </thead>
                @foreach (var dtc in dc.TypeElementContext(a => a.Copies))
                {
                    dtc.FormGroupStyle = FormGroupStyle.SrOnly;
                    <tr>
                        <td>
                            @Html.EntityLine(dtc, d => d.Type)
                        </td>
                        <td>
                            @Html.ValueLine(dtc, d => d.CopyTable)
                        </td>
                    </tr>
                }
            </table>
        </div>
    </fieldset>
    @Html.ValueLine(dc, d => d.EnableForeignKeys)
    @Html.ValueLine(dc, d => d.ReseedIds)
    @Html.ValueLine(dc, d => d.BackupDatabase)
    @Html.ValueLine(dc, d => d.DropDatabase)
    @Html.EntityLine(dc, d => d.Exception)
}
