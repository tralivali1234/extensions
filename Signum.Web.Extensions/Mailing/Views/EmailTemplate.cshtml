@using Signum.Entities.Mailing
@using Signum.Engine.DynamicQuery
@using Signum.Engine.Basics
@using Signum.Web.Mailing

@Html.ScriptCss("~/Mailing/Content/Mailing.css")

@using (var ec = Html.TypeContext<EmailTemplateEntity>())
{
    ec.LabelColumns = new BsColumn(3);
    <div class="row">
        <div class="col-sm-8">
            @Html.ValueLine(ec, e => e.Name)
            @Html.EntityCombo(ec, e => e.SystemEmail)
            @Html.EntityLine(ec, e => e.Query)
            <div class="row">
                <div class="col-sm-4">
                    @Html.ValueLine(ec, e => e.EditableMessage, vl => vl.InlineCheckbox = true)
                </div>
                <div class="col-sm-4">
                    @Html.ValueLine(ec, e => e.DisableAuthorization, vl => vl.InlineCheckbox = true)
                </div>
                <div class="col-sm-4">
                    @Html.ValueLine(ec, e => e.SendDifferentMessages, vl => vl.InlineCheckbox = true)
                </div>
            </div>
        </div>
    </div>
    ec.LabelColumns = new BsColumn(2);
    if (ec.Value.Query != null)
    {
        object queryName = QueryLogic.ToQueryName(ec.Value.Query.Key);
        ViewData[ViewDataKeys.QueryDescription] = DynamicQueryManager.Current.QueryDescription(queryName); //To be use inside query token controls

        <div style="clear:both"></div>
        @Html.EntityDetail(ec, e => e.From, el => el.PreserveViewData = true)
        <div class="repeater-inline">
            @Html.EntityRepeater(ec, e => e.Recipients, el => el.PreserveViewData = true)
        </div>
        @Html.EntityList(ec, e => e.Attachments)
        @Html.EntityLine(ec, e => e.MasterTemplate)
        @Html.ValueLine(ec, e => e.IsBodyHtml)

        <div class="sf-email-replacements-container">
            @Html.EntityTabRepeater(ec, e => e.Messages, er =>
       {
           er.PreserveViewData = true;
       })
        </div>
    }
}

<script>
    $(function () {
        @(MailingClient.Module["initReplacements"]())
    });
</script>
