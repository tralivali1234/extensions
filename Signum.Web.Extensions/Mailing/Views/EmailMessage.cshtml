@using Signum.Engine
@using Signum.Entities.Mailing
@using Signum.Web.Mailing
@using Signum.Web.Files

@Html.ScriptCss("~/Mailing/Content/Mailing.css")


@using (var e = Html.TypeContext<EmailMessageEntity>())
{
    <div class="sf-email-message">

        @using (var tabs = Html.Tabs(e))
        {
            if (e.Value.State != EmailMessageState.Created)
            {
                e.ReadOnly = true;
            }


            tabs.Tab("sfEmailMessage", typeof(EmailMessageEntity).NiceName(), @<text>

                <fieldset>
                    <legend>Properties</legend>
                    <div class="row">
                        <div class="col-sm-5">
                            @using (var sc = e.SubContext())
                            {
                                sc.LabelColumns = new BsColumn(4);

                                @Html.ValueLine(sc, f => f.State)
                                @Html.ValueLine(sc, f => f.Sent)
                                @Html.ValueLine(sc, f => f.BodyHash)
                            }
                        </div>
                        <div class="col-sm-7">
                            @Html.EntityLine(e, f => f.Template)
                            @Html.EntityLine(e, f => f.Package)
                            @Html.EntityLine(e, f => f.Exception)
                        </div>
                    </div>
                </fieldset>


                <div class="form-inline repeater-inline">
                    @Html.EntityDetail(e, f => f.From)
                    @Html.EntityRepeater(e, f => f.Recipients)
                    @Html.EntityRepeater(e, f => f.Attachments)
                </div>

                @{e.LabelColumns = new BsColumn(1);}

                @Html.EntityLine(e, f => f.Target)
                @Html.ValueLine(e, f => f.Subject)
                @Html.ValueLine(e, f => f.IsBodyHtml, vl => vl.InlineCheckbox = true)
                @if (e.Value.State == EmailMessageState.Created)
                {
                    @Html.ValueLine(e, f => f.Body, vl =>
               {
                   vl.ValueLineType = ValueLineType.TextArea;
                   vl.ValueHtmlProps["style"] = "width:100%; height:180px;";
               })

                    <script>
                        $(function () {
                            @(MailingClient.Module["initHtmlEditor"](e.Compose("Body"), Signum.Engine.Mailing.EmailLogic.Configuration.DefaultCulture.Name))
                        });
                    </script>
                }
                else
                {
                    var body = MailingClient.GetWebMailBody(e.Value.Body, new WebMailOptions
                    {
                        Attachments = e.Value.Attachments,
                        UntrustedImage = null,
                        Url = Url,
                    });
                    <div>
                        @if (e.Value.IsBodyHtml)
                        {
                            <iframe id="@e.Compose("iframe")" style="width:100%">
                                @Html.Raw(body)
                            </iframe>
                            <script>
                                $(function () {
                                    var iframe = $(".sf-email-message #@e.Compose("iframe")");
                                    @(MailingClient.Module["activateIFrame"](new Newtonsoft.Json.Linq.JRaw("iframe")))
                                });
                            </script>
                        }
                        else
                        {
<pre>
                            @Html.Raw(HttpUtility.HtmlEncode(e.Value.Body))
                        </pre>
                        }
                    </div>
                }
            </text>);

            if (e.Value.Mixins.OfType<EmailReceptionMixin>().Any() && e.Value.Mixin<EmailReceptionMixin>().ReceptionInfo != null)
            {
                using (var ri = e.SubContext(f => f.Mixin<EmailReceptionMixin>().ReceptionInfo))
                {
                    tabs.Tab("sfEmailReceptionInfo", ri.PropertyRoute.PropertyInfo.NiceName(), @<text>
                        <fieldset>
                            <legend>Properties</legend>

                            @Html.EntityLine(ri, f => f.Reception)
                            @Html.ValueLine(ri, f => f.UniqueId)
                            @Html.ValueLine(ri, f => f.SentDate)
                            @Html.ValueLine(ri, f => f.ReceivedDate)
                            @Html.ValueLine(ri, f => f.DeletionDate)

                        </fieldset>

                        <pre>@ri.Value.RawContent</pre>
                    </text>);
                }
            }
        }
    </div>
}
