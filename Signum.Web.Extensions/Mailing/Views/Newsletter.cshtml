@using Signum.Entities.Mailing
@using Signum.Entities.Reflection
@using Signum.Engine.DynamicQuery
@using Signum.Engine.Basics
@using Signum.Web.Mailing
@using Signum.Entities.DynamicQuery
@Html.ScriptCss("~/Mailing/Content/Mailing.css")
@using (var nc = Html.TypeContext<NewsletterEntity>())
{
    using(var tabs = Html.Tabs(nc))
    {
        tabs.Tab("emTabMain", typeof(NewsletterEntity).NiceName(), @<text>
    @Html.ValueLine(nc, n => n.Name)
    @Html.ValueLine(nc, n => n.State, vl => vl.ReadOnly = true)

    @Html.ValueLine(nc, n => n.From)
    @Html.ValueLine(nc, n => n.DisplayFrom)

    @Html.EntityLine(nc, e => e.Query)

    @if (nc.Value.State == NewsletterState.Sent)
            {
        @Html.ValueLine(nc, n => n.Subject, vl => vl.ReadOnly = true)
        <fieldset>
            <legend>Message</legend>
            <div class="sf-email-htmlbody">
                @Html.Raw(nc.Value.Text)
            </div>
        </fieldset>
            }
            else if (nc.Value.IsNew)
            {
        <div style="display: none">
            @Html.ValueLine(nc, e => e.Subject)
            @Html.ValueLine(nc, e => e.Text, vl => vl.ValueLineType = ValueLineType.TextArea)
        </div>
            }
            else
            {
                object queryName = QueryLogic.ToQueryName(nc.Value.Query.Key);
                var queryDescription = DynamicQueryManager.Current.QueryDescription(queryName); //To be use inside query token controls
                    
        <div class="sf-email-replacements-container">
            <div class="sf-template-message-insert-container">
                <fieldset class="sf-email-replacements-panel">
                    <legend>Replacements</legend>
                    @using (var sc = new Context(nc, "qtb"))
                    {
                        @Html.QueryTokenBuilder(null, sc, MailingClient.GetQueryTokenBuilderSettings(queryDescription, SubTokensOptions.CanAnyAll | SubTokensOptions.CanElement))
                        <input type="button" disabled="disabled" class="btn btn-default btn-sm sf-button sf-email-inserttoken sf-email-inserttoken-basic" data-prefix="@sc.Prefix" value="@(EmailTemplateViewMessage.Insert.NiceToString())" />
                        <input type="button" disabled="disabled" class="btn btn-default btn-sm sf-button sf-email-inserttoken sf-email-inserttoken-if" data-prefix="@sc.Prefix" data-block="if" value="if" />
                        <input type="button" disabled="disabled" class="btn btn-default btn-sm sf-button sf-email-inserttoken sf-email-inserttoken-foreach" data-prefix="@sc.Prefix" data-block="foreach" value="foreach" />
                        <input type="button" disabled="disabled" class="btn btn-default btn-sm sf-button sf-email-inserttoken sf-email-inserttoken-any" data-prefix="@sc.Prefix" data-block="any" value="any" />
                    }
                </fieldset>
            </div>
            @Html.ValueLine(nc, e => e.Subject, vl => vl.ValueHtmlProps["class"] = "sf-email-inserttoken-target")
            @Html.ValueLine(nc, e => e.Text, vl =>
                    {
                        vl.ValueLineType = ValueLineType.TextArea;
                        vl.ValueHtmlProps["style"] = "width:100%; height:180px;";
                        vl.ValueHtmlProps["class"] = "sf-rich-text-editor";
                    })
            <script type="text/javascript">
                 $(function () {
                    @(MailingClient.Module["initHtmlEditorWithTokens"](nc.SubContext(e => e.Text).Prefix, UICulture));
                });
            </script>
        </div>
            }
    </text>);
        if (!nc.Value.IsNew)
        {
            tabs.Tab("emTabSend", typeof(NewsletterDeliveryEntity).NiceName(), Html.SearchControl(new FindOptions(typeof(NewsletterDeliveryEntity))
               {
                   FilterOptions = { new FilterOption("Newsletter", nc.Value) { Frozen = true } },
                   SearchOnLoad = true,
               }, new Context(nc, "ncSent")));
        }  
    }
    
<script>
     $(function () {
        @(MailingClient.Module["initReplacements"]());
    });
</script>
}
