@using Signum.Web
@using Signum.Entities.DynamicQuery
@using Signum.Engine.DynamicQuery
@using System.Configuration
@using Signum.Entities.Reflection
@using Signum.Entities
@using Signum.Entities.Chart
@using Signum.Web.Chart
@model TypeContext<ChartRequest>
@Html.ScriptCss("~/Chart/Content/Chart.css")
@{ 
    QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];
    if (queryDescription == null)
    {
        queryDescription = DynamicQueryManager.Current.QueryDescription(Model.Value.QueryName);
        ViewData[ViewDataKeys.QueryDescription] = queryDescription;
    }

    List<FilterOption> filterOptions = (List<FilterOption>)ViewData[ViewDataKeys.FilterOptions];

    var entityColumn = queryDescription.Columns.SingleEx(a => a.IsEntity);
    Type entitiesType = entityColumn.Type.CleanType();
}

@using (Html.BeginForm())
{
    <h2>
        <span class="sf-entity-title">@(ViewBag.Title)</span>
        <a id="@Model.Compose("sfFullScreen")" class="sf-popup-fullscreen" href="#">
            <span class="glyphicon glyphicon-new-window"></span>
        </a>
    </h2>
    @Html.ValidationSummaryAjax()
    @Html.AntiForgeryToken()

    <div id="@Model.Compose("sfChartControl")" class="sf-chart-control SF-control-container">
        @Html.HiddenRuntimeInfo(Model)
        @Html.Hidden(Model.Compose("sfOrders"), Model.Value.Orders.IsNullOrEmpty() ? "" :
        (Model.Value.Orders.ToString(oo => (oo.OrderType == OrderType.Ascending ? "" : "-") + oo.Token.FullKey(), ";") + ";"))
        <div>
            @{
    ViewData[ViewDataKeys.FilterOptions] = filterOptions;
    ViewData[ViewDataKeys.QueryTokenSettings] = ChartClient.GetQueryTokenBuilderSettings(queryDescription,
        SubTokensOptions.CanAnyAll | SubTokensOptions.CanElement | (Model.Value.GroupResults ? SubTokensOptions.CanAggregate : 0));
    Html.RenderPartial(Finder.Manager.FilterBuilderView);
            }

        </div>
        <div id="@Model.Compose("sfChartBuilderContainer")" class="SF-control-container">
            @Html.Partial(ChartClient.ChartBuilderView, Model)
        </div>
        <script type="text/javascript">
            require(["@ChartClient.Module"], function (Chart) {
                var options = @(MvcHtmlString.Create(Model.Value.ToChartRequest(Url, "", ChartRequestMode.complete).ToString()));
                new Chart.ChartRequest(options);
            }); 
        </script>
        <div class="sf-query-button-bar">
            <button type="submit" class="sf-query-button sf-chart-draw btn btn-primary" id="@Model.Compose("qbDraw")">@ChartMessage.DrawChart.NiceToString()</button>
            <button class="sf-query-button sf-chart-script-edit btn btn-default"  id="@Model.Compose("qbEdit")">@ChartMessage.EditScript.NiceToString()</button>
            @UserChartClient.GetChartMenu(this.ViewContext, Url, queryDescription.QueryName, entitiesType, Model.Prefix, (Lite<UserChartEntity>)ViewData["UserChart"]).ToStringButton(Html)
        </div>
        <br />
        <div id="@Model.Compose("divResults")" class="sf-search-results-container">
            @JavascriptMessage.searchForResults.NiceToString()
        </div>
    </div>
}
