@using Signum.Web
@using Signum.Entities.DynamicQuery
@using Signum.Engine.DynamicQuery
@using System.Configuration
@using Signum.Entities.Reflection
@using Signum.Entities
@using Signum.Entities.Chart
@using Signum.Web.Chart
@using Signum.Engine.Authorization;
@using Signum.Entities.Authorization;
@using Signum.Web.UserAssets;


@helper ColorLink(TypeContext tc, Type type)
{
    var identType = type.IsEnum ? EnumEntity.Generate(type) : type;
    <div class="col-sm-4">
        @Html.FormGroup(tc, null, ChartMessage.ColorsFor0.NiceToString().FormatWith(type.NiceName()),
                    Html.ActionLink(Signum.Engine.Chart.ChartColorLogic.Colors.Value.ContainsKey(identType) ? ChartMessage.ViewPalette.NiceToString() : ChartMessage.CreatePalette.NiceToString(),
                                    (ColorChartController cc) => cc.Colors(Navigator.ResolveWebTypeName(identType)), new { @class = "form-control" }))
    </div>
}

@using (var tc = Html.TypeContext<ChartColumnEmbedded>())
{

    if (tc.Value == null)
    {
        tc.Value = new ChartColumnEmbedded();
    }
    
    <tr class="sf-chart-token" data-token="@(((TypeElementContext<ChartColumnEmbedded>)tc.Parent).Index)">
        <th>@(tc.Value.PropertyLabel + (tc.Value.ScriptColumn.IsOptional ? "?" : ""))
        </th>
        <td style="text-align: center">
            @if (tc.Value.GroupByVisible)
            {
                var groupCheck = new HtmlTag("input")
                    .IdName(tc.Compose("group"))
                    .Attr("type", "checkbox")
                    .Attr("value", "True")
                    .Class("sf-chart-group-trigger");

                if (!tc.Value.GroupByEnabled)
                {
                    groupCheck.Attr("disabled", "disabled");
                }

                bool groupResults = tc.Value.GroupByChecked;
                if (groupResults)
                {
                    groupCheck.Attr("checked", "checked");
                }
                @groupCheck.ToHtmlSelf()
                @Html.Hidden(tc.Compose("group"), groupResults)
            }
        </td>
        <td>
            <div class="sf-query-token">
                @Html.QueryTokenDNBuilder(tc.SubContext(a => a.Token), new QueryTokenBuilderSettings((QueryDescription)ViewData[ViewDataKeys.QueryDescription],
               SubTokensOptions.CanElement | (tc.Value.ParentChart.GroupResults && !tc.Value.IsGroupKey == true ? SubTokensOptions.CanAggregate : 0))
                {
                    ControllerUrl = null,
                })
            </div>
            <a class="sf-chart-token-config-trigger">@ChartMessage.Chart_ToggleInfo.NiceToString()</a>
        </td>
    </tr>
    
   
    
    <tr class="sf-chart-token-config" style="display: none">
        <td />

        <td />
        <td colspan="1">
            <div class="form-vertical">
                @using (var sc = tc.SubContext())
                {
                    sc.FormGroupSize = FormGroupSize.Small;
                    sc.FormGroupStyle = FormGroupStyle.Basic;
                    <div class="row">
                        <div class="col-sm-4">@Html.ValueLine(sc, ct => ct.DisplayName, vl => vl.ValueHtmlProps["class"] = "sf-chart-redraw-onchange")</div>
                        
                        @if (sc.Value.Token != null && !Navigator.IsReadOnly(typeof(ChartColorEntity)))
                        {
                            var type = sc.Value.Token.Token.Type.CleanType();

                            if (type.UnNullify().IsEnum && Signum.Engine.Maps.Schema.Current.Tables.ContainsKey(EnumEntity.Generate(type.UnNullify())))
                            {
                            @ColorLink(sc, type.UnNullify());
                            }
                            else
                            {
                                var imp = sc.Value.Token.Token.GetImplementations();

                                if (imp != null && !imp.Value.IsByAll)
                                {
                                    foreach (var item in imp.Value.Types.Iterate())
                                    {
                            @ColorLink(sc, item.Value);
                                    }
                                }
                            }
                        }

                    </div>
                }
            </div>
        </td>
    </tr>
}
