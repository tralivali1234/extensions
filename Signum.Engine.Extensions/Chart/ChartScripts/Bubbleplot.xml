<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript GroupBy="Optional">
  <Columns>
    <Column DisplayName="Color" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Horizontal Axis" ColumnType="Positionable" />
    <Column DisplayName="Vertical Axis" ColumnType="Positionable" />
    <Column DisplayName="Size" ColumnType="Magnitude" />
  </Columns>
  <Parameters>
    <Parameter Name="UnitMargin" Type="Number" ValueDefinition="40" />
    <Parameter Name="HorizontalScale" Type="Enum" ValueDefinition="ZeroMax(M) | MinMax | Log(M)" ColumnIndex="1" />
    <Parameter Name="VerticalScale" Type="Enum" ValueDefinition="ZeroMax(M) | MinMax | Log(M)" ColumnIndex="2" />
    <Parameter Name="SizeScale" Type="Enum" ValueDefinition="ZeroMax | MinMax | Log" />
    <Parameter Name="ShowLabel" Type="Enum" ValueDefinition="Yes | No" />
    <Parameter Name="FillOpacity" Type="Number" ValueDefinition=".4" />
    <Parameter Name="LabelColor" Type="String" ValueDefinition="" />
    <Parameter Name="ColorScale" Type="Enum" ValueDefinition="Ordinal | ZeroMax | MinMax | Sqrt  | Log" />
    <Parameter Name="ColorInterpolate" Type="Enum" ValueDefinition="YlGn|YlGnBu|GnBu|BuGn|PuBuGn|PuBu|BuPu|RdPu|PuRd|OrRd|YlOrRd|YlOrBr|Purples|Blues|Greens|Oranges|Reds|Greys|PuOr|BrBG|PRGn|PiYG|RdBu|RdGy|RdYlBu|Spectral|RdYlGn" />
    <Parameter Name="ColorScheme" Type="Enum" ValueDefinition="category10|accent|dark2|paired|pastel1|pastel2|set1|set2|set3|BrBG[K]|PRGn[K]|PiYG[K]|PuOr[K]|RdBu[K]|RdGy[K]|RdYlBu[K]|RdYlGn[K]|Spectral[K]|Blues[K]|Greys[K]|Oranges[K]|Purples[K]|Reds[K]|BuGn[K]|BuPu[K]|OrRd[K]|PuBuGn[K]|PuBu[K]|PuRd[K]|RdPu[K]|YlGnBu[K]|YlGn[K]|YlOrBr[K]|YlOrRd[K]" />
    <Parameter Name="ColorSchemeSteps" Type="Enum" ValueDefinition="3|4|5|6|7|8|9|10|11" />
  </Parameters>
  <Icon FileName="bubbles.png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAABQVJREFUeNrsmP1vU1UYx7+nL1u73Xbtdke3zo69sY051oFj6AAjUQwYthj9QX+QBBD8wYQoIZj4i/8AYZKYyCIiPyAxGuNw0+BbRIlDB4pjZmyOt40x2Mratevajvb2Hs+57Wo7eVlY92KyJ3nS9p7c9nO/z/d5zu0llFIs5FBhgcciYFIAt+49RhcVfMjQPOyJp85dpb93DqDnyjBkNglKC7OxuiofzzxeQuYd8KU9H9MMowGCkAaLNReyTDE44kNX859498hP9OvDO8m8lfjlPcfpkuxM5OVZYDAKUKtVSgoGAVarBSJb27zzMJ03wIwMAaJoZqrJSoaZepGUlTRnmRXw785cpnMO2Hj0NOVl5SXlvuNg8iRcmEZThj4tDe0dfXOvYM+129DpUiOKRWEi+a+CfC0lNQXdrHnmvEmoohq/KhqDiSk45f28eLC0IBvjPn8MIl41Oaomh5wITKC82DL3Cq6qtOGvE+eh0+tjvptUTY42C/dmwB9Arb0qOi/76A9tPbh4aUi5AJNRj43ry7G1fiVJuoJPrykiY55xjNx2ReHkODUjsF63BxN+PzatjQzsjz5vR5ikotpeBru9HEtyc3Hy9CUcbf6DzsqYOfH+NuJ0jmJ4yAGv14dgSEKIpX/ch1GnE+NjYzj54S4F7uCxNpotZrLG0kFi6klSGCAEWezYt6e7Z28naW3aQfica7/Qj+7LQ8ox7jle1knlePRedcCUmRWBUwBlhMJh8B7yeAPJBfSPDdT7Ow+1yI4zkNy9qGA/YhcLoKqoQ3r1Gw1pGbbWqeekpmhwJyhBo4UCGJLkGGzSu/jWJ3Ut1PELtBlFEB7dBWPlq9CaSkCHTqH7yJqWu52zZmUBXKMeBSzIyhuKpt8XQFmRJTmAAabctcM2arI9Bl1BPTTm5SBaQUltZgX0JS8iv2g5zh2wUp97oD5h3960gricbgwPj8Dnm0BgIgjv2DjcLheefbIiOYC+zqYWQSxGSs7auKMyn9rKK2VdnJq3AflWEf6Oxv8o+eWh7WTz+mXQkyBwxwv7six81bSdPLduerdlD/SgPHKWlbUkbjsJxyA5XOQY85mpDBLz593ilS12wnJ2BnWYNYQuty4BjspS9LMcU1NtsMHd34Z4Z7k7P6Ch/hblO3iozeXQLm2AacX07xen2STyfeEir4mdOfLj63Tiwn6otOnQFz8PXeEWEKa0s+0dZS1pCqqNhZC8A9CaS+NKOgWOK+29DsGcp7x3nX+PSoPfM7AXoNKJMfXVehGZgg2Oi83QiNXUVPUambGCRKyFNNp9Xzi+xmcjsayLwN74hjXVEwlwk55VM8CsRyoR6mtOTonTqnY3OIYGEbz58z3h+Nr1Wy7o7XsaIr79Gxrj0jhrRBuKn8/KrDYWQXJ1JafE6SZba+XuG6TjoJXmBkagYR2tFvJiZeXKcbjVe2/GykXl4OQNZCJcgpfDyd1JSra1N6hyNjA/Xoez6zMluTeJdSPKd/zWkOBbQwGksf57wvEL05jLkrsXC0xJ4alGRaUHbVIqWz2CPU1Qp+eAaIREOL8DnpsXYK59e3b/uN8vxNp9ZNjZQf29nyLFUsMUZX6UQ5A8V+AZ7IChcCMyV+0m8waoqLz5OLl9dj+V+r+Aq+9XqNh9oCG7GBk1b0GseZMkbQ7OJLKZkqjdh5n8O/n/PDxaaI/gjh3YqtiALD6jXgSc5/hHgAEA3YHVJnv5B90AAAAASUVORK5CYII=]]></Icon>
  <Script><![CDATA[function DrawChart(chart, data){
  
  var xRule = rule({
    _1 : 5,
    title : 15,
    _2 : 5, 
    labels: parseInt(data.parameters["UnitMargin"]),
    _3 : 5,
    ticks: 4,
    content: '*',
    _4: 5,
  }, width);
  //xRule.debugX(chart)
  
  var yRule = rule({
    _1 : 5,
    content: '*',
    ticks: 4,
    _2 : 5,
    labels: 10,
    _3 : 10,
    title: 15,
    _4 : 5,
  }, height);
  //yRule.debugY(chart);
  
  
  var x = scaleFor(data.columns.c1, data.rows.map(function(r){return r.c1;}), 0, xRule.size('content'), data.parameters["HorizontalScale"]);
  
  var y = scaleFor(data.columns.c2, data.rows.map(function(r){return r.c2;}), 0, yRule.size('content'), data.parameters["VerticalScale"]);
  
  var xTickSize = data.columns.c1.type == "Date" ||data.columns.c1.type == "DateTime" ? 100 : 60; 
  
  var xTicks = x.ticks(width / xTickSize);
  var xTickFormat = x.tickFormat(width / 50);
  
  chart.append('svg:g').attr('class', 'x-lines').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .enterData(xTicks, 'line', 'y-lines')
    .attr('x1', function(t) { return x(t); })
    .attr('x2', function(t) { return x(t); })
    .attr('y1', yRule.size('content'))
  	.style('stroke', 'LightGray');
  
  chart.append('svg:g').attr('class', 'x-tick').attr('transform', translate(xRule.start('content'), yRule.start('ticks')))
    .enterData(xTicks, 'line', 'x-tick')
    .attr('x1', x)
    .attr('x2', x)
    .attr('y2', yRule.size('ticks'))
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'x-label').attr('transform', translate(xRule.start('content'), yRule.end('labels')))
    .enterData(xTicks, 'text', 'x-label')
    .attr('x', x)
    .attr('text-anchor', 'middle')
    .text(xTickFormat);
  
  chart.append('svg:g').attr('class', 'x-title').attr('transform', translate(xRule.middle('content'), yRule.middle('title')))
    .append('svg:text').attr('class', 'x-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
  	.text(data.columns.c1.title);
  
  
  var yTicks = y.ticks(height / 50);
  var yTickFormat = y.tickFormat(height / 50);
  chart.append('svg:g').attr('class', 'y-lines').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-lines')
    .attr('x2', xRule.size('content'))
    .attr('y1', function(t) { return -y(t); })
    .attr('y2', function(t) { return -y(t); })
    .style('stroke', 'LightGray');
  
  chart.append('svg:g').attr('class', 'y-tick').attr('transform', translate(xRule.start('ticks'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-tick')
    .attr('x2', xRule.size('ticks'))
    .attr('y1', function(t) { return -y(t); })
    .attr('y2', function(t) { return -y(t); })
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform', translate(xRule.end('labels'), yRule.end('content')))
    .enterData(yTicks, 'text', 'y-label')
    .attr('y', function(t) { return -y(t); })
    .attr('dominant-baseline', 'middle')
    .attr('text-anchor', 'end')
    .text(yTickFormat);
  
  chart.append('svg:g').attr('class', 'y-title').attr('transform', translate(xRule.middle('title'), yRule.middle('content')) + rotate(270))
    .append('svg:text').attr('class', 'y-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c2.title);
  
  var color;
  if(data.parameters["ColorScale"] == "Ordinal"){
    color = d3.scaleOrdinal(ChartUtils.getColorScheme(data.parameters["ColorScheme"], data.parameters["ColorSchemeSteps"])).domain( data.rows.map(function(v) { return v.c0; }));
  }else{
    var scaleFunc = scaleFor(data.columns.c0, data.rows.map(function(r){return r.c0;}), 0, 1, data.parameters["ColorScale"]);
    var colorInterpolate = data.parameters["ColorInterpolate"];
    var colorInterpolation = ChartUtils.getColorInterpolation(colorInterpolate); 
    color = function(v){return colorInterpolation(scaleFunc(v)); }
  }  
  var sizeList = data.rows.map(function(r){return r.c3;});
      
  var sizeTemp = scaleFor(data.columns.c3, sizeList, 0, 1, data.parameters["SizeScale"]);
  
  var totalSizeTemp = d3.sum(data.rows, function(p){ return sizeTemp(p.c3); });
  
  var sizeScale = scaleFor(data.columns.c3, sizeList, 0, (xRule.size('content') * yRule.size('content')) / (totalSizeTemp * 3), data.parameters["SizeScale"]);

  
  //PAINT GRAPH
  var gr = chart.enterData(data.rows.sort(function (p){ return -p.c3;})  , 'g', 'shape-serie').attr('transform', translate(xRule.start('content'), yRule.end('content')));
  
  gr
    .append('svg:circle').attr('class', 'shape')
    .attr('stroke', function(p) { return p.c0.color || color(p.c0); })
    .attr('stroke-width', 3)
    .attr('fill', function(p) { return p.c0.color || color(p.c0); })
    .attr('fill-opacity', data.parameters["FillOpacity"])
    .attr('shape-rendering', 'initial')
    .attr('r', function(p) { return Math.sqrt(sizeScale(p.c3)/Math.PI); })
    .attr('cx', function(p) { return x(p.c1); })
    .attr('cy', function(p) { return -y(p.c2); })
    ;
  
  if(data.parameters["ShowLabel"] == 'Yes')
  {
    gr.append('svg:text', 'number-label')
      .attr('y', function (v) { return -y(v.c2); })
      .attr('x', function (v) { return x(v.c1);})
      .attr('fill', function(p) { return  data.parameters["LabelColor"] || p.c0.color || color(p.c0); })
      .attr('dominant-baseline', 'central')
      .attr('text-anchor', 'middle')
      .attr('font-weight', 'bold')
      .text(function (v) { return v.c0.niceToString(); })
      .each(function (v) { ellipsis(this, Math.sqrt(sizeScale(v.c3)/Math.PI) *2, 0, ""); });
  }
  
  gr.attr('data-click', function(p) { return getClickKeys(p, data.columns); })
    .append('svg:title')
    .text(function(p) { return p.c0.niceToString() + 
      ("\n" + data.columns.c1.title +": " + p.c1.niceToString()) + 
      ("\n" + data.columns.c2.title +": " + p.c2.niceToString()) + 
      ("\n" + data.columns.c3.title +": " + p.c3.niceToString()) });
      
  
 
  chart.append('svg:g').attr('class', 'x-axis').attr('transform', translate(xRule.start('content'), yRule.end('content')))
     .append('svg:line')
     .attr('class', 'x-axis')
     .attr('x2', xRule.size('content'))
     .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-axis').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .append('svg:line')
    .attr('class', 'y-axis')
    .attr('y2', yRule.size('content'))
    .style('stroke', 'Black');

}]]></Script>
</ChartScript>