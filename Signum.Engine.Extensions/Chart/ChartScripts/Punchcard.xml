<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript GroupBy="Always">
  <Columns>
    <Column DisplayName="Horizontal Axis" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Vertical Axis" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Size" ColumnType="Magnitude" IsOptional="true" />
    <Column DisplayName="Color" ColumnType="Magnitude" IsOptional="true" />
    <Column DisplayName="Opacity" ColumnType="Magnitude" IsOptional="true" />
    <Column DisplayName="Inner Size" ColumnType="Magnitude" IsOptional="true" />
    <Column DisplayName="Ordering" ColumnType="Magnitude" IsOptional="true" />
  </Columns>
  <Parameters>
    <Parameter Name="XMargin" Type="Number" ValueDefinition="110" />
    <Parameter Name="XSort" Type="Enum" ValueDefinition="AscendingKey|AscendingToStr|AscendingSumOrder|DescendingKey|DescendingToStr|DescendingSumOrder|None" />
    <Parameter Name="YSort" Type="Enum" ValueDefinition="AscendingKey|AscendingToStr|AscendingSumOrder|DescendingKey|DescendingToStr|DescendingSumOrder|None" />
    <Parameter Name="Shape" Type="Enum" ValueDefinition="Circle | Rectangle | ProgressBar" />
    <Parameter Name="SizeScale" Type="Enum" ValueDefinition="ZeroMax | MinMax | Log | Sqrt" />
    <Parameter Name="ColorScale" Type="Enum" ValueDefinition="ZeroMax | MinMax | Sqrt  | Log" />
    <Parameter Name="ColorInterpolate" Type="Enum" ValueDefinition="YlGn|YlGnBu|GnBu|BuGn|PuBuGn|PuBu|BuPu|RdPu|PuRd|OrRd|YlOrRd|YlOrBr|Purples|Blues|Greens|Oranges|Reds|Greys|PuOr|BrBG|PRGn|PiYG|RdBu|RdGy|RdYlBu|Spectral|RdYlGn" />
    <Parameter Name="StrokeColor" Type="String" ValueDefinition="gray" />
    <Parameter Name="StrokeWidth" Type="Number" ValueDefinition="2" />
    <Parameter Name="FillColor" Type="String" ValueDefinition="gray" />
    <Parameter Name="FillOpacity" Type="Number" ValueDefinition=".4" />
    <Parameter Name="OpacityScale" Type="Enum" ValueDefinition="ZeroMax | MinMax | Log | Sqrt" />
    <Parameter Name="InnerSizeType" Type="Enum" ValueDefinition="Absolute | Relative" />
    <Parameter Name="InnerFillColor" Type="String" ValueDefinition="red" />
    <Parameter Name="NumberOpacity" Type="Number" ValueDefinition="0.8" />
    <Parameter Name="NumberColor" Type="String" ValueDefinition="white" />
    <Parameter Name="HorizontalLineColor" Type="String" ValueDefinition="LightGray" />
    <Parameter Name="VerticalLineColor" Type="String" ValueDefinition="LightGray" />
  </Parameters>
  <Icon FileName="punchcard.png"><![CDATA[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]]></Icon>
  <Script><![CDATA[function DrawChart(chart, data){
    
  
  function chooseSort(collection, shortType){
    switch(shortType){
      case "AscendingToStr": return collection.orderBy(function(v){return v.k.toStr || "";});
      case "AscendingKey": return collection.orderBy(function(v){return v.k.key || "";});  
      case "AscendingSumOrder": return collection.orderBy(function(v){return v.sum;});  
      case "DescendingToStr": return collection.orderByDescending(function(v){return v.k.toStr || "";});
      case "DescendingKey": return collection.orderByDescending(function(v){return v.k.key || "";});  
      case "DescendingSumOrder": return collection.orderByDescending(function(v){return v.sum;});  
      case "None":  return collection;
    }
  }
  
  function getSum(g){
     return g.elements.reduce(function(acum, val) { return acum + (val.c6 || 0) }, 0);
  }
  
  var dim0 = data.rows
     .groupBy(function(r){return "k" + r.c0.key; })
    .map(function(g){ return { k: g.elements[0].c0, sum: getSum(g) };});

 var dim1 = data.rows
     .groupBy(function(r){return "k" + r.c1.key; })
     .map(function(g){ return { k: g.elements[0].c1, sum: getSum(g) };});
 
  dim0 = chooseSort(dim0, data.parameters["XSort"]).map(function(a) { return a.k; });
  dim1 = chooseSort(dim1, data.parameters["YSort"]).map(function(a) { return a.k; });

  var xRule = rule({
    _1 : 5,
    title : 15,
    _2 : 10, 
    labels : parseInt(data.parameters["XMargin"]),
    _3 : 5,
    ticks: 4,
    content: '*',
    _4: 10,
  }, width);
  //xRule.debugX(chart)
  
  var yRule = rule({
    _1 : 5,
    content: '*',
    ticks: 4,
    _2 : 5,
    labels0: 15,
    labels1: 15,
    _3 : 10,
    title: 15,
    _4 : 5,
  }, height);
  //yRule.debugY(chart);
  
  var x = d3.scaleBand()
      .domain(dim0)
      .range([0, xRule.size('content')]);
  
  var y = d3.scaleBand()
      .domain(dim1)
      .range([0, yRule.size('content')]);
  
 debugger;
  
  var color = null;
  if(data.columns.c3.token != null)
  {
    var scaleFunc = scaleFor(data.columns.c3, data.rows.map(function(r){return r.c3;}), 0, 1, data.parameters["ColorScale"]);
    var colorInterpolator = ChartUtils.getColorInterpolation(data.parameters["ColorInterpolate"]);
    color = function(v){return colorInterpolator(scaleFunc(v)); }
  }
  
  var opacity = null;
  if(data.columns.c4.token != null)
  {
   	
    opacity = scaleFor(data.columns.c4, data.rows.map(function(r){return r.c4;}), 0, 1, data.parameters["OpacityScale"]);
  }
  
  var shape = data.parameters["Shape"];
  var innerSize = null
  if(data.columns.c5.token != null)
  {
  	innerSize = scaleFor(data.columns.c5, data.rows.map(function(r){return r.c5;}), 0, 100, data.parameters["OpacityScale"]);
  }
  
  if(data.parameters["VerticalLineColor"]){
  chart.append('svg:g').attr('class', 'x-line').attr('transform',  translate(xRule.start('content') + x.bandwidth() / (shape == "ProgressBar" ? 1 : 2), yRule.start('content')))
    .enterData(dim0, 'line', 'y-line')
     .attr('y2',  yRule.size('content'))
      .attr('x1', function (d) { return x(d); })
      .attr('x2', function (d) { return x(d); })
    .style('stroke', data.parameters["VerticalLineColor"]);
  }
  
  chart.append('svg:g').attr('class', 'x-tick').attr('transform', translate(xRule.start('content') + x.bandwidth() / (shape == "ProgressBar" ? 1 : 2), yRule.start('ticks')))
    .enterData(dim0, 'line', 'x-tick')
      .attr('y2',  yRule.size('ticks'))
      .attr('x1', function (d) { return x(d); })
      .attr('x2', function (d) { return x(d); })
      .style('stroke', 'Black');
  
  if ((x.bandwidth() * 2) > 60)     
  {
    chart.append('svg:g').attr('class', 'x-label').attr('transform', translate(xRule.start('content')+ (x.bandwidth() / 2), yRule.middle('labels0')))
      .enterData(dim0, 'text', 'x-label')
        .attr('x', function (d) { return x(d); })
        .attr('y', function (d, i) { return yRule.middle('labels' + (i % 2)) - yRule.middle('labels0'); })
        .attr('dominant-baseline', 'middle')
        .attr('text-anchor', 'middle')
        .text(function (d) { return d.niceToString(); })
        .each(function (v) { ellipsis(this, x.bandwidth() * 1.7); });
  }
  
  chart.append('svg:g').attr('class', 'x-title').attr('transform', translate(xRule.middle('content'), yRule.middle('title')))
    .append('svg:text').attr('class', 'x-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c0.title);
  

  if(data.parameters["HorizontalLineColor"]){
  chart.append('svg:g').attr('class', 'y-line').attr('transform', translate(xRule.start('content'), yRule.end('content') - y.bandwidth() / (shape == "ProgressBar" ? 1 : 2)))
    .enterData(dim1, 'line', 'y-line')
    .attr('x2', xRule.size('content'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', data.parameters["HorizontalLineColor"]);
  }
  
  chart.append('svg:g').attr('class', 'y-tick').attr('transform', translate(xRule.start('ticks'), yRule.end('content') - y.bandwidth() / 2))
    .enterData(dim1, 'line', 'y-tick')
    .attr('x2', xRule.size('ticks'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'Black');
  
   if (y.bandwidth() > 16)     
   {
      chart.append('svg:g').attr('class', 'y-label').attr('transform',  translate(xRule.end('labels'), yRule.end('content') - y.bandwidth() / 2))
        .enterData(dim1, 'text', 'y-label')
        .attr('y', function (t) { return -y(t); })
        .attr('dominant-baseline', 'middle')
        .attr('text-anchor', 'end')
        .text(function (d) { return d.niceToString(); })
        .each(function (v) { ellipsis(this, xRule.size('labels')); });  
	}
 
  chart.append('svg:g').attr('class', 'y-label').attr('transform', translate(xRule.middle('title'), yRule.middle('content')) + rotate(270))
    .append('svg:text').attr('class', 'y-label')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c1.title);
  
 
  var groups = chart.enterData(data.rows, 'g').attr('data-click', function(r) { return getClickKeys(r, data.columns); });
  
  
  function configureShape(column, rowValue, domain, extra)
  {
  
    var shapes = groups.append(shape == "Circle" ? 'circle': 'rect', 'punch').attr('transform', translate(xRule.start('content') + x.bandwidth() / 2, yRule.end('content') - y.bandwidth() / 2))
        .filter(function(r) {return r != undefined;})      
        .attr('fill-opacity', function(r) {return data.parameters["FillOpacity"]* (opacity != null ? opacity(r.c4) : 1);})
        .attr("shape-rendering","initial");


    if(shape == "Circle")
    {
       var circleSize = Math.min(x.bandwidth(), y.bandwidth()) * 0.45; 
       var area = column.token == null? function(){return circleSize * circleSize;} : scaleFor(column, domain, 0, circleSize * circleSize, data.parameters["SizeScale"]);
       extra.numberOpacity = function(r) { return area(r) / 500; };

       shapes.attr('cx', function(r, i) { return x(r.c0); })
        .attr('cy', function(r) { return -y(r.c1); })
        .attr('r', function(r) { return  Math.sqrt(area(rowValue(r))); });

    } else if(shape == "Rectangle") {

       var area = column.token == null? function(){return x.bandwidth() * y.bandwidth();} : scaleFor(column, domain, 0, x.bandwidth() * y.bandwidth(), data.parameters["SizeScale"]); 
       var ratio = x.bandwidth() / y.bandwidth();
       var recWidth = function(r) { return  Math.sqrt(area(rowValue(r)) * ratio); };
       var recHeight = function(r) { return Math.sqrt(area(rowValue(r)) / ratio); };
       extra.numberOpacity = function(r) { return area(r) / 500; };

      shapes.attr('x', function(r, i) { return x(r.c0) - recWidth(r) / 2; })
        .attr('y', function(r) { return -y(r.c1) - recHeight(r) / 2; })
        .attr('width', recWidth)
        .attr('height', recHeight);

    } else if(shape == "ProgressBar") {

       var recWidth = column.token == null? function(){return x.bandwidth();} : scaleFor(column, domain, 0, x.bandwidth(), data.parameters["SizeScale"]); 
       extra.numberOpacity = function(r) { return 1; };

      shapes.attr('x', function(r, i) { return x(r.c0) - x.bandwidth() / 2; })
        .attr('y', function(r) { return -y(r.c1) - y.bandwidth() / 2; })
        .attr('width', function(r) { return recWidth(rowValue(r));})
        .attr('height', y.bandwidth());    
    }
    
    return shapes;
 }
  
 var extra = {};
  configureShape(data.columns.c2, function(r) { return r.c2; }, data.rows.map(function(r) { return r.c2; }), extra)
   .attr('fill', function(r) { return color == null? (data.parameters["FillColor"] || 'black'):  color(r.c3); })
   .attr('stroke', function(r) { return data.parameters["StrokeColor"] || (color == null? 'black': color(r.c3)); })
   .attr('stroke-width',  data.parameters["StrokeWidth"])
   .attr('stroke-opacity', function(r){return(opacity != null ? opacity(r.c4) : 1); });
  
  
 var isRelative = data.parameters["InnerSizeType"] == "Relative"; 
 if(data.columns.c5.token != null)
 {  
   var fun = !isRelative ? function(r) { return r.c5; } :
   		data.columns.c2.token != null ?  function(r) { return r.c5 * r.c2; }:
        function(r)  { return r.c5; } ;
   var domain = !isRelative ? data.rows.map(function(r) { return r.c5; }) :
   		data.columns.c2.token != null ?  data.rows.map(function(r) { return r.c2; }):
   	    [1]
   
    configureShape(data.columns.c5, fun, domain, {})
      .attr('fill', data.parameters["InnerFillColor"] || 'black')
 }
  
 
  function percentage(v) { return Math.floor(v * 10000)/100 + "%";} 
  
  if(data.parameters["NumberOpacity"] > 0)
  { 
      groups.append('text').attr('class', 'punch').attr('transform', translate(xRule.start('content') + x.bandwidth() / 2, yRule.end('content') - y.bandwidth() / 2))
      .attr('x', function(r, i) { return x(r.c0); })
      .attr('y', function(r) { return -y(r.c1) })
      .attr('fill', data.parameters["NumberColor"])
      .attr('dominant-baseline', 'central')
      .attr('opacity', function(r){ return data.parameters["NumberOpacity"] * extra.numberOpacity(r.c2);})
      .attr('text-anchor', 'middle')
      .attr('font-weight', 'bold')
      .text(function (r) { 
        return data.columns.c2.token != null ? r.c2 : 
               data.columns.c5.token != null ? (isRelative? percentage(r.c5) : r.c5) :
               data.columns.c3.token != null ? r.c3 :
               data.columns.c4.token != null ? r.c4 : null; });
 
  }
  
  groups.append('svg:title')
      .text(function(r) { return r.c0.niceToString() + ', ' + r.c1.niceToString() + 
        (data.columns.c2.token == null? "" : ("\n" +  data.columns.c2.title +": " + r.c2.niceToString())) +
        (data.columns.c3.token == null? "" : ("\n" +  data.columns.c3.title +": " + r.c3.niceToString())) +
        (data.columns.c4.token == null? "" : ("\n" +  data.columns.c4.title +": " + r.c4.niceToString())) +
        (data.columns.c5.token == null? "" : ("\n" +  data.columns.c5.title +": " + (isRelative? percentage(r.c5) : r.c5.niceToString())) +
        (data.columns.c6.token == null? "" : ("\n" +  data.columns.c6.title +": " + r.c6.niceToString()))); });
  
  chart.append('svg:g').attr('class', 'x-axis').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .append('svg:line')
    .attr('class', 'x-axis')
    .attr('x2', xRule.size('content'))
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-axis').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .append('svg:line')
    .attr('class', 'y-axis')
    .attr('y2', yRule.size('content'))
    .style('stroke', 'Black'); 
  
}]]></Script>
</ChartScript>