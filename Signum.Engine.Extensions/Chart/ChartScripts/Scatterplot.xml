<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript GroupBy="Optional">
  <Columns>
    <Column DisplayName="Color" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Horizontal Axis" ColumnType="Positionable" />
    <Column DisplayName="Vertical Axis" ColumnType="Positionable" />
  </Columns>
  <Parameters>
    <Parameter Name="UnitMargin" Type="Number" ValueDefinition="40" />
    <Parameter Name="HorizontalScale" Type="Enum" ValueDefinition="ZeroMax(M) | MinMax | Log(M)" ColumnIndex="1" />
    <Parameter Name="VerticalScale" Type="Enum" ValueDefinition="ZeroMax(M) | MinMax | Log(M)" ColumnIndex="2" />
    <Parameter Name="PointSize" Type="Number" ValueDefinition="4" />
    <Parameter Name="DrawingMode" Type="Enum" ValueDefinition="Svg|Canvas" />
    <Parameter Name="ColorScale" Type="Enum" ValueDefinition="Ordinal | ZeroMax | MinMax | Sqrt  | Log" />
    <Parameter Name="ColorInterpolate" Type="Enum" ValueDefinition="YlGn|YlGnBu|GnBu|BuGn|PuBuGn|PuBu|BuPu|RdPu|PuRd|OrRd|YlOrRd|YlOrBr|Purples|Blues|Greens|Oranges|Reds|Greys|PuOr|BrBG|PRGn|PiYG|RdBu|RdGy|RdYlBu|Spectral|RdYlGn" />
    <Parameter Name="ColorScheme" Type="Enum" ValueDefinition="category10|accent|dark2|paired|pastel1|pastel2|set1|set2|set3|BrBG[K]|PRGn[K]|PiYG[K]|PuOr[K]|RdBu[K]|RdGy[K]|RdYlBu[K]|RdYlGn[K]|Spectral[K]|Blues[K]|Greys[K]|Oranges[K]|Purples[K]|Reds[K]|BuGn[K]|BuPu[K]|OrRd[K]|PuBuGn[K]|PuBu[K]|PuRd[K]|RdPu[K]|YlGnBu[K]|YlGn[K]|YlOrBr[K]|YlOrRd[K]" />
    <Parameter Name="ColorSchemeSteps" Type="Enum" ValueDefinition="3|4|5|6|7|8|9|10|11" />
  </Parameters>
  <Icon FileName="points.png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAytJREFUeNrsWN1PUnEYfmhw+FC0Tz+T6bxwols206ZMzPIDLw43XbRVduVFN62vv6PuyjZnrdwqda0SU8GWlnnhbSpaQssVDQQMBZQM+XUOWihgATvUueDdzthg4332vs/zvO97BIQQ8Dn2gOeRAsgJwLbr3bwlojDalx6nmf7ybgCUJA0F5RqI5Id1XCd22U3016kBiJkceWUaSDMLdDEB9Dg/0ra+uv6DeUcQsDuwbO9DRkOXluIQpMtupp1P1P1ZbA6HA157L8iJLq0sU6H7Kwct08PIzK+ARNEMafFp+FcWYH0/ymn1rDNhOdyfYf8wFptIKIkMZH0FgR9eBHwOEL8XlFjGKUBKLInIIaKksXEwX9mIFVsP1uYfIrDOgMuqgrzwOKcAc5RNWGXaGspRCekuOSIAslzLaOjUWmYMQQLLi1WgOBZJkGv1nVqr0QBKmg5pUS2i8S8Y7Kg7f+0BYT/5+KQmSVKM+k9xp2eSvBidgd+/AU29EpfbVAJeVVA/Poua6nJUV5Vj+LWRfxWkREIsLa/C7fUh64CcfxxsVJXAbPoEn9vFtLg0+STku80Ik12A248nydDYpqia1UpcvRCfqJJuMyNvQ6IyvDEmXyTxRiBA4HL74PWt/xsVB/e5RRNtmdJBLGWWTaUGsr2KXWf1KUZUQ4xvssG2OOkiWbKZaFNHLrE/1xBbzzGy+PQk8XxboHkzi23GoR3L5obHwiybo/zxQZFYGmXZlPBnkuSUNmEtbNkUF9bwB2AaKwg1s2zOGoJXn7xIhfQwkTit87R1mr3YZMgua4V8n0LHGcAOxlgHt4y1hVHdlSjGyoIsrmmP+odOq5l2Pavvz2YvtiUHfI5eQH1PK9+fGMgIDhq2Gas+AWNdnIsUkWP+1e/fbz2aJPTFu6S1vZPcvD9B4gb4y1gdLm9CLWEFEy4ioTh0sb2cCBVgZNwYf4vZbWVwy1hbEjDW7NJmfLdvuwoPHUVuxRldopMlAuClc7UC5klYdUFB1HVpbXN65v5NQ27l2R3ca6gtgX5sswBNdTEUIHXVceWDfHsF132jLWhvgtQ76hTA/xw/BRgAN0sztqA7z64AAAAASUVORK5CYII=]]></Icon>
  <Script><![CDATA[function DrawChart(chart, data){

  var xRule = rule({
    _1 : 5,
    title : 15,
    _2 : 5, 
    labels: parseInt(data.parameters["UnitMargin"]),
    _3 : 5,
    ticks: 4,
    content: '*',
    _4: 5,
  }, width);
  //xRule.debugX(chart)
  
  var yRule = rule({
    _1 : 5,
    content: '*',
    ticks: 4,
    _2 : 5,
    labels: 10,
    _3 : 10,
    title: 15,
    _4 : 5,
  }, height);
  //yRule.debugY(chart);
  
  var x = scaleFor(data.columns.c1, data.rows.map(function(r){return r.c1;}), 0, xRule.size('content'), data.parameters["HorizontalScale"]);
  
  var y = scaleFor(data.columns.c2, data.rows.map(function(r){return r.c2;}), 0, yRule.size('content'), data.parameters["VerticalScale"]);
  
  
  var pointSize = data.parameters["PointSize"];
  
  var numXTicks = data.columns.c1.type == 'Date' || data.columns.c1.type == 'DateTime' ? 100 : 60;
  
  var xTicks = x.ticks(width / numXTicks);
  var xTickFormat = x.tickFormat(width / numXTicks);
  
  chart.append('svg:g').attr('class', 'x-lines').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .enterData(xTicks, 'line', 'y-lines')
    .attr('x1', function(t) { return x(t); })
    .attr('x2', function(t) { return x(t); })
    .attr('y1', yRule.size('content'))
  	.style('stroke', 'LightGray');
  
  chart.append('svg:g').attr('class', 'x-tick').attr('transform', translate(xRule.start('content'), yRule.start('ticks')))
    .enterData(xTicks, 'line', 'x-tick')
    .attr('x1', x)
    .attr('x2', x)
    .attr('y2', yRule.size('ticks'))
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'x-label').attr('transform', translate(xRule.start('content'), yRule.end('labels')))
    .enterData(xTicks, 'text', 'x-label')
    .attr('x', x)
    .attr('text-anchor', 'middle')
    .text(xTickFormat);
  
  chart.append('svg:g').attr('class', 'x-title').attr('transform', translate(xRule.middle('content'), yRule.middle('title')))
    .append('svg:text').attr('class', 'x-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
  	.text(data.columns.c1.title);
  
  var yTicks = y.ticks(height / 50);
  var yTickFormat = y.tickFormat(height / 50);
  chart.append('svg:g').attr('class', 'y-lines').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-lines')
    .attr('x2', xRule.size('content'))
    .attr('y1', function(t) { return -y(t); })
    .attr('y2', function(t) { return -y(t); })
    .style('stroke', 'LightGray');
  
  chart.append('svg:g').attr('class', 'y-tick').attr('transform', translate(xRule.start('ticks'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-tick')
    .attr('x2', xRule.size('ticks'))
    .attr('y1', function(t) { return -y(t); })
    .attr('y2', function(t) { return -y(t); })
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform', translate(xRule.end('labels'), yRule.end('content')))
    .enterData(yTicks, 'text', 'y-label')
    .attr('y', function(t) { return -y(t); })
    .attr('dominant-baseline', 'middle')
    .attr('text-anchor', 'end')
    .text(yTickFormat);
  
  chart.append('svg:g').attr('class', 'y-title').attr('transform', translate(xRule.middle('title'), yRule.middle('content')) + rotate(270))
    .append('svg:text').attr('class', 'y-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c2.title);
  
  var color;
  if(data.parameters["ColorScale"] == "Ordinal"){
    color = d3.scaleOrdinal(ChartUtils.getColorScheme(data.parameters["ColorScheme"], data.parameters["ColorSchemeSteps"])).domain( data.rows.map(function(v) { return v.c0; }));
  }else{
    var scaleFunc = scaleFor(data.columns.c0, data.rows.map(function(r){return r.c0;}), 0, 1, data.parameters["ColorScale"]);
    var colorInterpolate = data.parameters["ColorInterpolate"];
    var colorInterpolation = ChartUtils.getColorInterpolation(colorInterpolate); 
    color = function(v){return colorInterpolation(scaleFunc(v)); }
  }
  

  var svg = chart.node();
  var container = svg.parentNode;
  
  if(data.parameters["DrawingMode"] == "Svg"){  
    
    //PAINT GRAPH
    chart.enterData(data.rows, 'g', 'shape-serie').attr('transform', translate(xRule.start('content'), yRule.end('content')))
      .append('svg:circle').attr('class', 'shape')
      .attr('stroke', function(p) { return p.c0.color || color(p.c0); })
      .attr('fill', function(p) { return p.c0.color || color(p.c0); })
      .attr('shape-rendering', 'initial')
      .attr('r', pointSize)
      .attr('cx', function(p) { return x(p.c1); })
      .attr('cy', function(p) { return -y(p.c2); })
      .attr('data-click', function(p) { return getClickKeys(p, data.columns); })
      .append('svg:title')
      .text(function(p) { return p.c0.niceToString() + 
        ("\n" + data.columns.c1.title +": " + p.c1.niceToString()) + 
        ("\n" + data.columns.c2.title +": " + p.c2.niceToString()) });
  }else{
      var w = xRule.size('content');
      var h = yRule.size('content');
    
      var c = document.createElement('canvas');
      var vc = document.createElement('canvas');
      container.appendChild(c);
      
      var dummy = chart.append('svg:circle')
      	.attr('class', 'dummy')
        .node();
    
      const canvas = d3.select(c)
       .attr('width', w)
       .attr('height', h)                    
       .style('position', 'absolute')    
       .style('left', xRule.start('content') + 'px')
       .style('top', yRule.start('content') + 'px');
       
      const virtualCanvas = d3.select(vc)
      	.attr('width', w)
      	.attr('height', h)                    
       .style('position', 'absolute')    
       .style('left', xRule.start('content') + 'px')
       .style('top', yRule.start('content') + 'px');
    
       const ctx = c.getContext("2d");
       const vctx = vc.getContext("2d");
       var colorToData = {};
       ctx.clearRect(0, 0, w, h);
       vctx.clearRect(0, 0, w, h);
       data.rows.forEach(function(p, i) {
           ctx.fillStyle = p.c0.color || color(p.c0);
           ctx.strokeStyle = p.c0.color || color(p.c0);
           var vColor = getVirtualColor(i); 
           vctx.fillStyle = vColor;
           vctx.strokeStyle = vColor;
           colorToData[vColor] = p;
         
           ctx.beginPath();
           ctx.arc(x(p.c1), h - y(p.c2), pointSize, 0, 2 * Math.PI);
           ctx.fill();
           ctx.stroke();
         
           vctx.beginPath();
           vctx.arc(x(p.c1), h - y(p.c2), pointSize, 0, 2 * Math.PI);
           vctx.fill();
           vctx.stroke();
         
       });
    
       console.log(colorToData)

       function getVirtualColor(index) {
          return d3.rgb(
            Math.floor(index / 256 / 256) % 256,
            Math.floor(index / 256) % 256,
            index % 256)
            .toString();
       }
    
        c.addEventListener('mousemove', function(e) {  
           const imageData = vctx.getImageData(e.offsetX, e.offsetY, 1, 1);
           const color = d3.rgb.apply(null, imageData.data).toString();
           const p = colorToData[color];
           if(p){
               c.style.cursor = "pointer";
               c.setAttribute("title", p.c0.niceToString() + 
        ("\n" + data.columns.c1.title +": " + p.c1.niceToString()) + 
        ("\n" + data.columns.c2.title +": " + p.c2.niceToString()));
           }else{
              c.style.cursor = "initial";
              c.setAttribute("title","...");
           }
       });
    
       c.addEventListener('mouseup', function(e) {  
           const imageData = vctx.getImageData(e.offsetX, e.offsetY, 1, 1);

           const color = d3.rgb.apply(null, imageData.data).toString();
           const p = colorToData[color];
           if(p){
               var clickEvent = new MouseEvent("mouseup", { relatedTarget : dummy });
               c.setAttribute("data-click", getClickKeys(p, data.columns));
           }
       });
  } 
  
  chart.append('svg:g').attr('class', 'x-axis').attr('transform', translate(xRule.start('content'), yRule.end('content')))
     .append('svg:line')
     .attr('class', 'x-axis')
     .attr('x2', xRule.size('content'))
     .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-axis').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .append('svg:line')
    .attr('class', 'y-axis')
    .attr('y2', yRule.size('content'))
    .style('stroke', 'Black');

}]]></Script>
</ChartScript>