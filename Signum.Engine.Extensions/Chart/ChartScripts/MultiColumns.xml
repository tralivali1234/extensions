<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript GroupBy="Always">
  <Columns>
    <Column DisplayName="Horizontal Axis" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Split Columns" ColumnType="Groupable" IsGroupKey="true" IsOptional="true" />
    <Column DisplayName="Height" ColumnType="Positionable" />
    <Column DisplayName="Height 2" ColumnType="Positionable" IsOptional="true" />
    <Column DisplayName="Height 3" ColumnType="Positionable" IsOptional="true" />
    <Column DisplayName="Height 4" ColumnType="Positionable" IsOptional="true" />
    <Column DisplayName="Height 5" ColumnType="Positionable" IsOptional="true" />
  </Columns>
  <Parameters>
    <Parameter Name="UnitMargin" Type="Number" ValueDefinition="20" />
    <Parameter Name="Scale" Type="Enum" ValueDefinition="ZeroMax(M) | MinMax | Log(M)" ColumnIndex="2" />
    <Parameter Name="NumberOpacity" Type="Number" ValueDefinition="0.8" />
    <Parameter Name="NumberColor" Type="String" ValueDefinition="White" />
    <Parameter Name="ColorScheme" Type="Enum" ValueDefinition="category10|accent|dark2|paired|pastel1|pastel2|set1|set2|set3|BrBG[K]|PRGn[K]|PiYG[K]|PuOr[K]|RdBu[K]|RdGy[K]|RdYlBu[K]|RdYlGn[K]|Spectral[K]|Blues[K]|Greys[K]|Oranges[K]|Purples[K]|Reds[K]|BuGn[K]|BuPu[K]|OrRd[K]|PuBuGn[K]|PuBu[K]|PuRd[K]|RdPu[K]|YlGnBu[K]|YlGn[K]|YlOrBr[K]|YlOrRd[K]" />
    <Parameter Name="ColorSchemeSteps" Type="Enum" ValueDefinition="3|4|5|6|7|8|9|10|11" />
  </Parameters>
  <Icon FileName="multicolumns.png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAmpJREFUeNrsmDFLHEEUgGdFAkIqwV+QTmxSB5IioFinicUFEoR0CWKXf5DCxk4sLK5I/oEYiGiRUtKI+A+UBCKEE3Fn3nvOm93B2515d3OLnFvswHIwezv7zfvevJ3djIhUm9uMannrAB8EsLfZpy6CHWAHGG+zk/x5u/+L9o/Pgv7VV4vqU+9F9uiADPf+7eugf+/7TwZsp2JAao/iWMMI4L+DNcr//g76nyw8V/Mr37KpATKcAQz6Ge7p0segf3C6M13FYOFigK3IQc49w4eBdgIioo0gKN3GCEKZe9pYxRqmv4qvDtfJXJ0rQqMUQfGL2p75PARIDjCHNEAe48v5V3Wxvhss++WXi2rjXbzQRwEZbu7Zm/DEYbFyWS3nnjs0JsHxRC8u/6gPa0Wh1/ba65tc/R/cqh9HJwz4MIrB5p6xkdMWMk9YxRULlQpQGOBj4hwkwviNOLo8sM8/Aw40CQ5vg/rpJjqmCsQjSBC9UQFYqNXaQ2ISHEFetcAVwEBTQBQVmVKLBwVJcQ2O3CIL9TZS7AFjitzCKGfPmiTAAK4ErOttFEEeXFKU+/wr4UB68a/B+evrescVemEVk6iIC7OLHkOiPHgAV+ZwXa9ploNGVKShgOPo4Yi9YB3uvgpU9ZomEYzBeUVe76joFYpDOF8FhvU2ArSFUFRkylnjmJ10DM5PcFgvK2+oOK5I2wGTtvkRuPsyNVQFsJFiFBUBgttqJT1/I62ud5yJGSnBJUUIKS9J8gQm0SsCukkJitL00gjAdL0ioDayosTN32jARL3cMv4E3LbPb/2tXlYB7D4edYCP2O4EGADo6x722MhiTAAAAABJRU5ErkJggg==]]></Icon>
  <Script><![CDATA[function DrawChart(chart, data){
 
 var pivot = data.columns.c1.token == null ?  
     ChartUtils.toPivotTable(data, "c0", ["c2", "c3", "c4", "c5", "c6"]): 
     ChartUtils.groupedPivotTable(data, "c0", "c1", "c2");
   
  var xRule = rule({
    _1 : 5,
    title : 15,
    _2 : 10, 
    labels : parseInt(data.parameters["UnitMargin"]),
    _3 : 5,
    ticks: 4,
    content: '*',
    _4: 10,
  }, width);
  //xRule.debugX(chart)
  
  var yRule = rule({
    _1 : 5,
    legend : 15,
    _2 : 5,
    content: '*',
    ticks: 4,
    _3 : 5,
    labels0: 15,
    labels1: 15,
    _4 : 10,
    title: 15,
    _5 : 5,
  }, height);
  //yRule.debugY(chart);
  
  var x = d3.scaleBand()
      .domain(pivot.rows.map(function (v) { return v.rowValue; }))
      .range([0, xRule.size('content')]);
  
  var allValues = pivot.rows.flatMap(function(r){ 
    return pivot.columns.map(function(c){ return r.values[c.key] && r.values[c.key].value; }); 
  });
 
  var y = scaleFor(data.columns.c2, allValues, 0, yRule.size('content'), data.parameters["Scale"]);
  
  chart.append('svg:g').attr('class', 'x-tick').attr('transform', translate(xRule.start('content')+ (x.bandwidth() / 2), yRule.start('ticks')))
    .enterData(pivot.rows, 'line', 'x-tick')
      .attr('y2',  function (d, i) { return yRule.start('labels' + (i % 2)) - yRule.start('ticks'); })
      .attr('x1', function (d) { return x(d.rowValue); })
      .attr('x2', function (d) { return x(d.rowValue); })
      .style('stroke', 'Black');
  
  if ((x.bandwidth() * 2) > 60) 
  {
    chart.append('svg:g').attr('class', 'x-label').attr('transform', translate(xRule.start('content')+ (x.bandwidth() / 2), yRule.middle('labels0')))
      .enterData(pivot.rows, 'text', 'x-label')
        .attr('x', function (d) { return x(d.rowValue); })
        .attr('y', function (d, i) { return yRule.middle('labels' + (i % 2)) - yRule.middle('labels0'); })
        .attr('dominant-baseline', 'middle')
        .attr('text-anchor', 'middle')
        .text(function (v) { return v.rowValue.niceToString(); })
        .each(function (v) { ellipsis(this, x.bandwidth() * 2); });
  }
  
  chart.append('svg:g').attr('class', 'x-title').attr('transform', translate(xRule.middle('content'), yRule.middle('title')))
    .append('svg:text').attr('class', 'x-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c0.title);
  
  var yTicks = y.ticks(10);
  var yTickFormat = y.tickFormat(width / 50);  
  chart.append('svg:g').attr('class', 'y-line').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-line')
    .attr('x2', xRule.size('content'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'LightGray');
  
  chart.append('svg:g').attr('class', 'y-tick').attr('transform', translate(xRule.start('ticks'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-tick')
    .attr('x2', xRule.size('ticks'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform',  translate(xRule.end('labels'), yRule.end('content')))
    .enterData(yTicks, 'text', 'y-label')
    .attr('y', function (t) { return -y(t); })
    .attr('dominant-baseline', 'middle')
    .attr('text-anchor', 'end')
    .text(yTickFormat);
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform', translate(xRule.middle('title'), yRule.middle('content')) + rotate(270))
    .append('svg:text').attr('class', 'y-label')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(pivot.title);
  
  var interMagin = 2;
  
  var xSubscale = d3.scaleBand()
      .domain(pivot.columns.map(function (s) { return s.key; }))
      .range([interMagin, x.bandwidth() - interMagin]);
  
  var color = d3.scaleOrdinal(ChartUtils.getColorScheme(data.parameters["ColorScheme"], data.parameters["ColorSchemeSteps"])).domain(pivot.columns.map(function (s) { return s.key; }));
  
  //PAINT GRAPH
  chart.enterData(pivot.columns, 'g', 'shape-serie').attr('transform', translate(xRule.start('content'), yRule.start('content')))  
    .each(function(s)
    {
       d3.select(this).enterData(pivot.rows, 'rect', 'shape')
      .filter(function(r) { return r.values[s.key] != undefined; })
      .attr('stroke', xSubscale.bandwidth() > 4 ? '#fff' : null)
      .attr('fill', function (r) { return s.color || color(s.key); })
      .attr('x', function (r) { return x(r.rowValue); })
      .attr('transform', function(r) { return translate(xSubscale(s.key),0); })
      .attr('width', xSubscale.bandwidth())
      .attr('y', function (r) { return yRule.size('content') - y(r.values[s.key] && r.values[s.key].value); })      
      .attr('height', function (r) { return y(r.values[s.key] && r.values[s.key].value); })       
      .attr('data-click', function (v) { return getClickKeys(v.values[s.key].rowClick, data.columns); })
      .append('svg:title')
      .text(function(v) { return v.values[s.key].valueTitle; });
      
      if (x.bandwidth() > 15 && data.parameters["NumberOpacity"] > 0)
      {
          d3.select(this).enterData(pivot.rows, 'text', 'number-label')
          .filter(function(r) {return r.values[s.key] != undefined && y(r.values[s.key] && r.values[s.key].value) > 10;})
          .attr('x', function (r) { return x(r.rowValue) + xSubscale.bandwidth() / 2 })
          .attr('y', function (r) { return yRule.size('content') - y(r.values[s.key] && r.values[s.key].value) / 2; })
          .attr('transform', function(r) { return translate(xSubscale(s.key), 0); })
          .attr('opacity', data.parameters["NumberOpacity"])
          .attr('fill',data.parameters["NumberColor"])
          .attr('dominant-baseline', 'central')
          .attr('text-anchor', 'middle')
          .attr('font-weight', 'bold')
          .text(function(v) { return v.values[s.key].value; })  
          .attr('data-click', function (v) { return getClickKeys(v.values[s.key].rowClick, data.columns); })
          .append('svg:title')
          .text(function(v) { return v.values[s.key].valueTitle; }); 
      }      
	});
  
  
  var legendScale = d3.scaleBand()
    .domain(pivot.columns.map(function (s, i) { return i; }))
    .range([0, xRule.size('content')]);
  
  if (legendScale.bandwidth() > 50) {
    
    var legendMargin = yRule.size('legend') + 4;
    
    chart.append('svg:g').attr('class', 'color-legend').attr('transform', translate(xRule.start('content'), yRule.start('legend')))
      .enterData(pivot.columns, 'rect', 'color-rect')
      .attr('x', function (e, i) { return legendScale(i); })
      .attr('width', yRule.size('legend'))
      .attr('height', yRule.size('legend'))
      .attr('fill', function (s) { return s.color || color(s.key); });
    
    chart.append('svg:g').attr('class', 'color-legend').attr('transform',  translate(xRule.start('content') + legendMargin, yRule.middle('legend') + 1))
      .enterData(pivot.columns, 'text', 'color-text')
      .attr('x', function (e, i) { return legendScale(i); })
      .attr('dominant-baseline', 'middle')
      .text(function (s) { return s.niceName; })
      .each(function (s) { ellipsis(this, legendScale.bandwidth() - legendMargin); });;
  }
  
  chart.append('svg:g').attr('class', 'x-axis').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .append('svg:line')
    .attr('class', 'x-axis')
    .attr('x2', xRule.size('content'))
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-axis').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .append('svg:line')
    .attr('class', 'y-axis')
    .attr('y2', yRule.size('content'))
    .style('stroke', 'Black'); 
}]]></Script>
</ChartScript>