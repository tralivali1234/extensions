<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript GroupBy="Always">
  <Columns>
    <Column DisplayName="Horizontal Axis" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Split Columns" ColumnType="Groupable" IsGroupKey="true" IsOptional="true" />
    <Column DisplayName="Height" ColumnType="Magnitude" />
    <Column DisplayName="Height 2" ColumnType="Magnitude" IsOptional="true" />
    <Column DisplayName="Height 3" ColumnType="Magnitude" IsOptional="true" />
    <Column DisplayName="Height 4" ColumnType="Magnitude" IsOptional="true" />
    <Column DisplayName="Height 5" ColumnType="Magnitude" IsOptional="true" />
  </Columns>
  <Parameters>
    <Parameter Name="Stack" Type="Enum" ValueDefinition="zero | expand | wiggle | silhouette" />
    <Parameter Name="Order" Type="Enum" ValueDefinition="none | ascending | descending | insideOut | reverse" />
    <Parameter Name="UnitMargin" Type="Number" ValueDefinition="20" />
    <Parameter Name="Labels" Type="Enum" ValueDefinition="Margin  | Inside | None" />
    <Parameter Name="LabelsMargin" Type="Number" ValueDefinition="100" />
    <Parameter Name="NumberOpacity" Type="Number" ValueDefinition="0.8" />
    <Parameter Name="NumberColor" Type="String" ValueDefinition="White" />
    <Parameter Name="ColorScheme" Type="Enum" ValueDefinition="category10|accent|dark2|paired|pastel1|pastel2|set1|set2|set3|BrBG[K]|PRGn[K]|PiYG[K]|PuOr[K]|RdBu[K]|RdGy[K]|RdYlBu[K]|RdYlGn[K]|Spectral[K]|Blues[K]|Greys[K]|Oranges[K]|Purples[K]|Reds[K]|BuGn[K]|BuPu[K]|OrRd[K]|PuBuGn[K]|PuBu[K]|PuRd[K]|RdPu[K]|YlGnBu[K]|YlGn[K]|YlOrBr[K]|YlOrRd[K]" />
    <Parameter Name="ColorSchemeSteps" Type="Enum" ValueDefinition="3|4|5|6|7|8|9|10|11" />
  </Parameters>
  <Icon FileName="stackedcolumns.png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAoJJREFUeNrsmL1uE0EUha9RuhRQBSVKA8iKe6gQUYqEAiHxAsgSqVJFUYQoyRvwEMFPkFSBxg6isCWkdFDElIhHcOyduTc7P7uZtWfHG9+11oVHWs2sLc98e+aeM9bWiAgWuT2ABW9LwFIAmx9bC1uIK/Oa+Ov5FXW6fZCIICXangDtPSLB3qstOHz/slYJ4GXvL7zZfQ4Yp4QQCMNIwHAk4GYoYDBUfQTffvxRgNXUINr4olipRD11CWkUVH2RiJsbIKECMKBoITVcPBZo+iIRPFcFlUIS7SXprh7tVamCSrVUPcckZotNX2kOkrO1iXJu/SlVKwVEyjdHAlytgphvjiQH2UF9enZF7e51WkMo3QXMIq+3G96wRco3h7TgbMBOrw9v917oSUdCxkErddgO4pA1gRvBxeVvb9iGzCHLqkFOlhFRrjmk3X42ICfL1Md55kgiiL3FnCxr1Dfhe/uXmQPJ+yCNZxs8QE6WHa0dw+rOvqdshB1I+Nc9iQf/eVtcRpb54NS4iJFX5pZlJJydQDVZBi69Z9UgI8vIfueHE3pcxMhTTTJ7lqEDh9rWLhxhsdNkqklmzjLl2hTOALlwQBFfQVaW6Rr0wZlewRMXsP50fWqW1Z88zq/BEJwc8U1y+PADPDr4NFZLdlGM9P31z89x/y4AmYXTvY4b4m9xxoVuPLhuDG2xfQgfXJqJHECdwxNwUVrkoSwzDg/AlZGD8T+siey6Tx2Z7ykLl/xGzVHGmwUfnLtgUH0XLnOCUFkKUj5cMg6or9UaLxELR2UAUuZ4kjlqBOWfgCtqjoJHnVNHPjUCdWTU58GpVlPhu2iv31pfmrUM4PIN6xKwwnYrwADxV36Q8C7avwAAAABJRU5ErkJggg==]]></Icon>
  <Script><![CDATA[function DrawChart(chart, data){
    
  var pStack = data.parameters["Stack"];
  var pivot = data.columns.c1.token == null ?  
       ChartUtils.toPivotTable(data, "c0", ["c2", "c3", "c4", "c5", "c6"]): 
       ChartUtils.groupedPivotTable(data, "c0", "c1", "c2");
  
  var xRule = rule({
    _1 : 5,
    title : 15,
    _2 : 10, 
    labels : parseInt(data.parameters["UnitMargin"]),
    _3 : 5,
    ticks: 4,
    content: '*',
    _4: 10,
  }, width);
  //xRule.debugX(chart)
  
  var yRule = rule({
    _1 : 5,
    legend : 15,
    _2 : 5,
    content: '*',
    ticks: 4,
    _3: data.parameters["Labels"] == "Margin" ? 5 : 0,
    labels: data.parameters["Labels"] == "Margin" ? parseInt(data.parameters["LabelsMargin"]) : 0,
    _4 : 10,
    title: 15,
    _5 : 5,
  }, height);
  //yRule.debugY(chart);
  

  var x = d3.scaleBand()
      .domain(pivot.rows.map(function (d) { return d.rowValue.key; }))
      .range([0, xRule.size('content')]);
  
  var pStack = data.parameters["Stack"];
  
  var stack = d3.stack()
    .offset(ChartUtils.getStackOffset(pStack))
    .order(ChartUtils.getStackOrder(data.parameters["Order"]))
    .keys(pivot.columns.map(function(d) { return d.key; }))
    .value(function(r, k){ 
      var v = r.values[k]; 
      return v && v.value && v.value.key || 0; 
    });
  
  var stackedSeries = stack(pivot.rows);
  
  var max = d3.max(stackedSeries, function(s){ return d3.max(s, function(v){return v[1];}); });
  var min = d3.min(stackedSeries, function(s){ return d3.min(s, function(v){return v[0];}); });
  
  var y = d3.scaleLinear()
      .domain([min, max])
      .range([0, yRule.size('content')]);
  
  chart.append('svg:g').attr('class', 'x-title').attr('transform', translate(xRule.middle('content'), yRule.middle('title')))
    .append('svg:text').attr('class', 'x-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c0.title);
  
  
  var yTicks = y.ticks(10);
  chart.append('svg:g').attr('class', 'y-line').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-line')
    .attr('x2', xRule.size('content'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'LightGray');
  
  chart.append('svg:g').attr('class', 'y-tick').attr('transform', translate(xRule.start('ticks'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-tick')
    .attr('x2', xRule.size('ticks'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'Black');
  
  var formatter = pStack == "expand" ? d3.format(".0%") : 
    		      pStack == "zero" ? d3.format("") : 
                  function(n) { return d3.format("")(n) + "?"};
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform',  translate(xRule.end('labels'), yRule.end('content')))
    .enterData(yTicks, 'text', 'y-label')
    .attr('y', function (t) { return -y(t); })
    .attr('dominant-baseline', 'middle')
    .attr('text-anchor', 'end')
    .text(formatter);
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform', translate(xRule.middle('title'), yRule.middle('content')) + rotate(270))
    .append('svg:text').attr('class', 'y-label')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(pivot.title);
  
  var color = d3.scaleOrdinal(ChartUtils.getColorScheme(data.parameters["ColorScheme"], data.parameters["ColorSchemeSteps"])).domain(pivot.columns.map(function (s) { return s.key; }));
  
  //PAINT CHART
  chart.enterData(stackedSeries, 'g', 'shape-serie').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .each(function(s){
      
      d3.select(this).enterData(s, 'rect', 'shape')
         .filter(function(v) {return v.data.values[s.key] != undefined;})
        .attr('stroke', x.bandwidth() > 4 ? '#fff' : null)
        .attr('fill', function (v) { return s.color || color(s.key); })
        .attr('x', function (v) { return x(v.data.rowValue); })
        .attr('width', x.bandwidth())
        .attr('height', function(v) { return y(v[1])- y(v[0]); } )
        .attr('y', function (v) { return -y(v[1]) })
        .attr('data-click', function (v) { return getClickKeys(v.data.values[s.key].rowClick, data.columns); })
        .append('svg:title')
        .text(function(v) { return v.data.values[s.key].valueTitle; });
      
      if(data.parameters["NumberOpacity"] > 0)
      {
          d3.select(this).enterData(s, 'text', 'number-label')
            .filter(function(v){return (y(v[1])- y(v[0])) > 10; })
            .attr('x', function (v) { return x(v.data.rowValue) + x.bandwidth() / 2; })
            .attr('y', function (v) { return -y(v[0])*0.5 -y(v[1])*0.5;})
            .attr('fill', data.parameters["NumberColor"])
            .attr('dominant-baseline', 'central')
            .attr('opacity', data.parameters["NumberOpacity"])
            .attr('text-anchor', 'middle')
            .attr('font-weight', 'bold')
            .text(function (v) { return v.data.values[s.key].value.niceToString(); })
            .attr('data-click', function (v) { return getClickKeys(v.data.values[s.key].rowClick, data.columns); })
            .append('svg:title')
            .text(function(v) { return v.data.values[s.key].valueTitle; });
      }
      
    });
  
  
  if (x.bandwidth() > 15) {
    
    if(data.parameters["Labels"] == "Margin")
    {
      chart.append('svg:g').attr('class', 'x-label').attr('transform', translate(xRule.start('content'), yRule.start('labels')))
          .enterData(pivot.rows, 'text', 'x-label')
          .attr('transform', function (v){ return translate( x(v.rowValue) + x.bandwidth()/2, 0 ) +  rotate(-90);})
          .attr('dominant-baseline', 'middle')
          .attr('fill', 'black')
      	  .attr('shape-rendering', 'geometricPrecision')
          .attr('text-anchor', "end")
          .text(function (v) { return v.rowValue.niceToString(); })
          .each(function (v) { ellipsis(this,  yRule.size('labels'), labelMargin); });
    }
    else if(data.parameters["Labels"] == "Inside")
    {
       function maxValue(rowIndex){
          return stackedSeries[stackedSeries.length - 1][rowIndex][1];
       }
      
      var labelMargin = 10;
      var size = yRule.size('content');
      
      chart.append('svg:g').attr('class', 'x-label').attr('transform', translate(xRule.start('content'), yRule.end('content')))
        .enterData(pivot.rows, 'text', 'x-label')
        .attr('transform', function (r, i){ return translate( x(r.rowValue) + x.bandwidth()/2, y(maxValue(i)) >= size/2 ? 0: -y(maxValue(i))) +  rotate(-90);})
        .attr('dominant-baseline', 'middle')
        .attr('font-weight', 'bold')
        .attr('fill', function (r,i) { return y(maxValue(i)) >= size/2 ? '#fff' : '#000'; })
        .attr('dx', function (r,i) { return labelMargin; })
        .attr('text-anchor',  function (r) { return y(r.max) >= size/2 ? 'end': 'start';})
        .text(function (r) { return r.rowValue.niceToString(); })
        .each(function (r) { var posy = y(r.max); ellipsis(this, posy >= size/2 ? posy : size - posy, labelMargin); });
    }    
  }
  
  var legendScale = d3.scaleBand()
    .domain(pivot.columns.map(function (s, i) { return i; }))
    .range([0, xRule.size('content')]);
  
  if (legendScale.bandwidth() > 50) {
    
    var legendMargin = yRule.size('legend') + 4;
    
    chart.append('svg:g').attr('class', 'color-legend').attr('transform', translate(xRule.start('content'), yRule.start('legend')))
      .enterData(pivot.columns, 'rect', 'color-rect')
      .attr('x', function (e, i) { return legendScale(i); })
      .attr('width', yRule.size('legend'))
      .attr('height', yRule.size('legend'))
      .attr('fill', function (s) { return s.color || color(s.key);});
    
    chart.append('svg:g').attr('class', 'color-legend').attr('transform',  translate(xRule.start('content') + legendMargin, yRule.middle('legend') + 1))
      .enterData(pivot.columns, 'text', 'color-text')
      .attr('x', function (e, i) { return legendScale(i); })
      .attr('dominant-baseline', 'middle')
      .text(function (s) { return s.niceName; })
      .each(function (s) { ellipsis(this, legendScale.bandwidth() - legendMargin); });
  }
  
  chart.append('svg:g').attr('class', 'x-axis').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .append('svg:line')
    .attr('class', 'x-axis')
    .attr('x2', xRule.size('content'))
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-axis').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .append('svg:line')
    .attr('class', 'y-axis')
    .attr('y2', yRule.size('content'))
    .style('stroke', 'Black'); 
  
}]]></Script>
</ChartScript>