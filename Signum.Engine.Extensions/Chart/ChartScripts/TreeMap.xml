<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript GroupBy="Optional">
  <Columns>
    <Column DisplayName="Square" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Size" ColumnType="Magnitude" />
    <Column DisplayName="Parent" ColumnType="Groupable" IsGroupKey="true" IsOptional="true" />
    <Column DisplayName="ColorScale" ColumnType="Magnitude" IsOptional="true" />
    <Column DisplayName="ColorScheme" ColumnType="Groupable" IsGroupKey="true" IsOptional="true" />
  </Columns>
  <Parameters>
    <Parameter Name="Scale" Type="Enum" ValueDefinition="ZeroMax | MinMax | Log" />
    <Parameter Name="Padding" Type="Number" ValueDefinition="4" />
    <Parameter Name="Opacity" Type="Number" ValueDefinition="0.5" />
    <Parameter Name="NumberOpacity" Type="Number" ValueDefinition="0.8" />
    <Parameter Name="NumberColor" Type="String" ValueDefinition="white" />
    <Parameter Name="ColorInterpolate" Type="Enum" ValueDefinition="YlGn|YlGnBu|GnBu|BuGn|PuBuGn|PuBu|BuPu|RdPu|PuRd|OrRd|YlOrRd|YlOrBr|Purples|Blues|Greens|Oranges|Reds|Greys|PuOr|BrBG|PRGn|PiYG|RdBu|RdGy|RdYlBu|Spectral|RdYlGn" />
    <Parameter Name="ColorScheme" Type="Enum" ValueDefinition="category10|accent|dark2|paired|pastel1|pastel2|set1|set2|set3|BrBG[K]|PRGn[K]|PiYG[K]|PuOr[K]|RdBu[K]|RdGy[K]|RdYlBu[K]|RdYlGn[K]|Spectral[K]|Blues[K]|Greys[K]|Oranges[K]|Purples[K]|Reds[K]|BuGn[K]|BuPu[K]|OrRd[K]|PuBuGn[K]|PuBu[K]|PuRd[K]|RdPu[K]|YlGnBu[K]|YlGn[K]|YlOrBr[K]|YlOrRd[K]" />
    <Parameter Name="ColorSchemeSteps" Type="Enum" ValueDefinition="3|4|5|6|7|8|9|10|11" />
    <Parameter Name="ColorScale" Type="Enum" ValueDefinition="ZeroMax | MinMax | Sqrt  | Log" />
  </Parameters>
  <Icon FileName="treemap.png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAABORJREFUeNrsWE1uHEUUrjEZCcmWI7Gw5AU5ARJIbHKQrAK+gVlxDnZADpAtijhGLgAHwAtLVhTJTgz2dNf7qKr3W+3pHoss8MIt91R196uqV+/ne195BSA95GsvPfDrUcFPvZ5o5+TH1w8qGF//dLLqFKzXq5N3rQXl+ls7pS03cvkbpU8JGNu70kmnb76u44bysPZxmecgHoPatjF0VeQPi/w1kPfb/OU98sAtDXXMRZE5umPB5Qtb+vA+aG3vQL6x+Mz3IYthX9rp93ofzcYgmnVk4rrzugj5gtA+Sb/ePG5AtHa1XrVI649inXZfsXy+ZmVU1i1eZC62xqBYIlhH3Vndlm2HSFncWyYFOnnbgCqWZHxTUudK8n6ioM1JaV5BdVswPaRdgeOrTmj9sGBTgkiUHy3+2nOLTZHp5EeXtfHjDgWbUhD3BZe2Plxp/Sax5Nbj701eE6tZN7s8wUMHZFbUtXYq6IHu7kxpZAXV3Z2Co7lppRZUF8IzeyrvrfTV4vMxCLaeJoUNcFezFSGxyDHIEJQ99mxTOh5mSV6mJEOS5AGPhW0ASwrmYMG4iLp6DHHqkyHIAiEhmutSCH6Rp+hakQV2J4nGFtDHU0rRct5XC7LlhuJe3UjY3GQzHIN1E4Mk0OjxOIm/uxak3FUPy74IvgEnHagDlmm82di6qUkVtVAIydMSKy0rqNjEEKIJETLXrCaZboVkXKvlEDbEcdqtdyghsc/KxWQywflK4hkVwTlAQIw/dKVusOdODtOgvxL5a8NaK5kmt1xJMKmlQCh3K3KcDNcPv3+7vidJORT5/QWZowUcpID4mBT/rRYxFmQwcZedUGEne0XmY3n5pIvTJpsdZhiixtM33xzshpkuA8liL209w4SajFgu270ncfp5VdASKjP4A172BK7G+SQht5YlRVAUaTunbeNSn0wATQhCBrMVCtYbg5IG9NhBFtJdvrfzEgVJFtJqwm39uIe84SwPJQ5Qy42CXGNgVFsULMH7Hwk6HORTKI3WVn02VqNbbCosBaJgdXtOwXtR/hTxixrl58QScCYKNCoQCtqsOWlk7ubuAOZOEtY7Sl3qGPWKhNWINVaCj8wLnW55actdqVR2Uix43o4GmgyJC4HFr19lF+l4Pos7wqrly63hByYpU806gUxoEihhlfpawuf4k46dDhOyK2MXWlezENMcyqFYR3FMY1AJayAJLXyEVGC8Ke1NOv3tq/Tq+4u/yrunqcQo5Zsyxe1lwcFns0DtMADLMss4TBUnZyeR9tthKzsH1HlaNg/cNqfdfFH6B6Wt/WKHzWcLbEbhIbDpyKophECg8OioWe4w1MsiiWJDa1Nt25J/l/5tme62tS2RZpMkK8tNdphp4Ew5sA4SiHSGbIcdBVyaHAkCZ6w5ANoIk6608Pp9ec7VxYIel+XnYKaSCDxofGF0l3bcME8Ig1N2p1voqqK7NpziOHmeTfLi6SLdaoftPBjhhJ1dI8ueVBjFQATrJerWqHMyDg58iJcE+/Xl+dtfXvzxtvW/Oz/7+cWfZwt0awhAW+kVfOEFstDVXWD7JsAKVvf6fHWpj8+x+cD94cMxNlcLMUg5kIV8b7LgxBXbanioxeKZcDjH5vIMNVFS+rIod47xn9bX7yvd6UP999vq8X/Ujwr+z9e/AgwAxrWtWUHZfOUAAAAASUVORK5CYII=]]></Icon>
  <Script><![CDATA[function DrawChart(chart, data){
  
  var color = null;
  if(data.columns.c3.token != null)
  {
    var scaleFunc = scaleFor(data.columns.c3, data.rows.map(function(r){ return r.c3; }), 0, 1, data.parameters["ColorScale"]);
    var colorInterpolator = ChartUtils.getColorInterpolation(data.parameters["ColorInterpolate"]);
    
    
    color = function(v){return colorInterpolator(scaleFunc(v.c3)); }
  }
  else if(data.columns.c4.token != null) 
  {
    var scheme = ChartUtils.getColorScheme(data.parameters["ColorScheme"], data.parameters["ColorSchemeSteps"]);
    var categoryColor = d3.scaleOrdinal(scheme).domain(data.rows.map(function(v) { return v.c4; }));
    color = function(v) { return v.c4.color || categoryColor(v.c4); };
  }
  else
  { 
    var scheme = ChartUtils.getColorScheme(data.parameters["ColorScheme"], data.parameters["ColorSchemeSteps"]);
    var categoryColor =  d3.scaleOrdinal(scheme).domain(data.rows.map(function(v) { return v.c0; }));
    color = function(v) { return v.c0.color || categoryColor(v.c0); };
  }
  
  
  var folderColor = null;
  if(!data.columns.c2.token != null){
    var scheme = ChartUtils.getColorScheme(data.parameters["ColorScheme"], data.parameters["ColorSchemeSteps"]);
    var categoryColor =  d3.scaleOrdinal(scheme).domain(data.rows.map(function(v) { return v.c2; }));
    folderColor = function(c2) { return  c2.color || categoryColor(c2); };
  }
  
  var root = ChartUtils.stratifyTokens(data, "c0", "c2");
  
  var size = scaleFor(data.columns.c1, data.rows.map(function(r){return r.c1;}), 0, 1, data.parameters["Scale"]);
  
  root.sum(function(r){
      return r == null ? 0: size(r.c1);
  });
  
  var opacity = data.columns.c2.token ?   parseFloat(data.parameters["Opacity"]) : 1;
  var padding = data.columns.c2.token ?   parseInt(data.parameters["Padding"]) : 1;
  var p2 = padding / 2;
  
  var bubble = d3.treemap()
  	.size([width, height])
    .round(true)
    .padding(padding);
  
  bubble(root);
  
  var nodes = root.descendants().filter(function(d){return !!d.data;});
  
  nodes.forEach(n => {
  	n.width = n.x1 - n.x0;
    n.height = n.y1 - n.y0;
  });
  
  var node = chart.selectAll("g.node")
    .data(nodes)
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return translate(d.x0-p2,d.y0-p2); });

  node.filter(function(d) {return !!d.data.folder;}).append("rect")
      .attr('shape-rendering', 'initial')
      .attr("width", function(d) { return d.width; })
      .attr("height", function(d) { return d.height;})
      .style("fill", function(d) { return  d.data.folder.color || folderColor(d.data.folder); })    
      .attr('data-click', function(p) { return getClickKeys({c2: p.data.folder}, data.columns); })
      .append('svg:title')
      .text(function(d) { return  d.data.folder.niceToString();});
  
  node.filter(function(d) { return !!d.data.c1; }).append("rect")
      .attr('shape-rendering', 'initial')
      .attr("opacity",opacity)
      .attr("width", function(d) { return d.width; })
      .attr("height", function(d) { return d.height; })
      .style("fill", function(d) { return color(d.data); })
      .attr('data-click', function(p) { return getClickKeys(p.data, data.columns); })
      .append('svg:title')
      .text(function(d) { return  d.data.c0.niceToString() + ': ' + d.data.c1.niceToString();});

  var showNumber = data.parameters["NumberOpacity"] > 0;
  
  var nodeFilter = node.filter(function(d) {return !!d.data.c1 && d.width > 10 && d.height > 25;});
  
  nodeFilter.append("text")
      .attr("text-anchor", "middle")
      .attr('dominant-baseline', 'middle')
      .attr("dx",function(d) { return d.width/2; })
  	  .attr("dy",function(d) { return d.height/2 + (showNumber ? -6: 0); })
      .attr('data-click', function(p) { return getClickKeys(p.data, data.columns); })
      .text(function(d) { return d.data.c0.niceToString(); })
      .each(function (d) { ellipsis(this, d.width, 4, ""); })
      .append('svg:title')
      .text(function(d) { return  d.data.c0.niceToString() + ': ' + d.data.c1.niceToString();});
  
  if(showNumber)
  {
    nodeFilter.append("text")
        .attr('fill', data.parameters["NumberColor"])
    	.attr('opacity', ".5")
        .attr('dominant-baseline', 'central')
        .attr('opacity', data.parameters["NumberOpacity"])
        .attr('text-anchor', 'middle')
        .attr('font-weight', 'bold')
        .attr("dx",function(d) { return d.width / 2; })
        .attr("dy",function(d) { return d.height / 2 + 6; })
        .attr('data-click', function(p) { return getClickKeys(p.data, data.columns); })
        .text(function(d) { return d.data.c1; })
        .each(function(d) { return ellipsis(this, d.r * 2, 1, ""); });
  }
  
}]]></Script>
</ChartScript>